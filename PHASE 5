PHASE 5: Booking Management Interface
🎯 Objective
Create a comprehensive booking management interface for restaurant staff with table view, calendar view, advanced filtering, and complete CRUD operations based on Figma design: https://www.figma.com/community/file/1308435721888237413
📋 Dependencies

Phase 1: Design system CSS variables and base components
Phase 3: Portal authentication system
Phase 4: Portal dashboard and navigation
Existing Backend: RB_Booking class, RB_Ajax::get_bookings(), CRUD methods

📦 Deliverables

booking-management.css - Complete interface styles
booking-management.js - Interactive functionality and AJAX operations
booking-management.php - Main management interface template
class-modern-booking-manager.php - WordPress integration and data handling

🎨 Interface Layout Specifications
Main Layout Structure
┌─────────────────────────────────────────────────────────────────────────────┐
│ Booking Management                    [📅 Calendar] [📋 Table] [⚙️ Settings] │ ← View Toggle
├─────────────────────────────────────────────────────────────────────────────┤
│ [📅 Today ▼] [Status: All ▼] [📍 Downtown ▼] [🔍 Search...] [📤 Export] [🔄] │ ← Filters Bar
├─────────────────────────────────────────────────────────────────────────────┤
│ [✓ Select All] [🗑️ Bulk Delete] [✅ Bulk Confirm] [📧 Send Reminders]        │ ← Bulk Actions
├─────────────────────────────────────────────────────────────────────────────┤
│ ┌─┬─────────────┬──────┬────────┬─────────┬──────────┬─────────────────────┐ │
│ │☐│Customer     │Time  │Party   │Table    │Status    │Actions              │ │ ← Table Header
│ ├─┼─────────────┼──────┼────────┼─────────┼──────────┼─────────────────────┤ │
│ │☐│John Doe     │19:00 │4 people│Table 5  │Confirmed │[👁️][✏️][❌][📧]      │ │
│ │☐│Sarah Wilson │19:30 │2 people│Table 8  │Pending   │[✅][✏️][❌][📞]      │ │
│ │☐│Mike Johnson │20:00 │6 people│Table 12 │Cancelled │[🔄][👁️][🗑️][📧]      │ │
│ │☐│Emma Davis   │20:30 │3 people│Table 3  │Confirmed │[👁️][✏️][❌][📧]      │ │
│ └─┴─────────────┴──────┴────────┴─────────┴──────────┴─────────────────────┘ │
├─────────────────────────────────────────────────────────────────────────────┤
│ Showing 1-25 of 127 bookings    [◀️ Previous] [1] [2] [3] [Next ▶️]          │ ← Pagination
└─────────────────────────────────────────────────────────────────────────────┘
```

### Calendar View Layout
```
┌─────────────────────────────────────────────────────────────────────────────┐
│ Calendar View - March 2024          [◀️ Previous] [Today] [Next ▶️]          │ ← Calendar Header
├─────────────────────────────────────────────────────────────────────────────┤
│ [Week] [Month] [Day]    [🔍 Search...] [📍 Downtown ▼] [Status: All ▼]      │ ← Calendar Controls
├─────────────────────────────────────────────────────────────────────────────┤
│ ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┐                                  │
│ │ Mon │ Tue │ Wed │ Thu │ Fri │ Sat │ Sun │                                  │ ← Calendar Grid
│ ├─────┼─────┼─────┼─────┼─────┼─────┼─────┤                                  │
│ │  11 │  12 │  13 │  14 │  15 │  16 │  17 │                                  │
│ │     │     │     │     │  🔴 │     │     │                                  │
│ │     │     │     │     │ 24  │     │     │                                  │
│ ├─────┼─────┼─────┼─────┼─────┼─────┼─────┤                                  │
│ │  18 │  19 │  20 │  21 │  22 │  23 │  24 │                                  │
│ │     │ 🟢  │ 🟡  │     │ 🔴  │     │     │                                  │
│ │     │ 12  │ 18  │     │ 32  │     │     │                                  │
│ └─────┴─────┴─────┴─────┴─────┴─────┴─────┘                                  │
└─────────────────────────────────────────────────────────────────────────────┘
📊 Booking Table Component
HTML Structure
html<div class="rb-booking-management">
  <!-- Header Section -->
  <div class="rb-management-header">
    <div class="rb-header-title">
      <h1 class="rb-page-title">Booking Management</h1>
      <div class="rb-page-subtitle">Manage reservations and customer bookings</div>
    </div>
    
    <div class="rb-header-actions">
      <div class="rb-view-toggle">
        <button class="rb-btn rb-btn-sm rb-view-btn rb-active" data-view="table">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
            <path d="M3 3h18v2H3V3zm0 4h18v2H3V7zm0 4h18v2H3v-2zm0 4h18v2H3v-2z"/>
          </svg>
          Table View
        </button>
        <button class="rb-btn rb-btn-sm rb-view-btn" data-view="calendar">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
            <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
          </svg>
          Calendar View
        </button>
      </div>
      
      <button class="rb-btn rb-btn-primary" id="add-booking-btn">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
        </svg>
        Add Booking
      </button>
    </div>
  </div>
  
  <!-- Filters Bar -->
  <div class="rb-filters-bar">
    <div class="rb-filters-section">
      <div class="rb-filter-group">
        <label class="rb-filter-label">Date Range</label>
        <div class="rb-date-range-picker">
          <input type="date" class="rb-input rb-input-sm" id="date-from" value="<?php echo date('Y-m-d'); ?>">
          <span class="rb-date-separator">to</span>
          <input type="date" class="rb-input rb-input-sm" id="date-to" value="<?php echo date('Y-m-d', strtotime('+7 days')); ?>">
        </div>
      </div>
      
      <div class="rb-filter-group">
        <label class="rb-filter-label">Status</label>
        <select class="rb-select rb-select-sm" id="status-filter">
          <option value="">All Statuses</option>
          <option value="confirmed">Confirmed</option>
          <option value="pending">Pending</option>
          <option value="cancelled">Cancelled</option>
          <option value="completed">Completed</option>
          <option value="no-show">No Show</option>
        </select>
      </div>
      
      <div class="rb-filter-group">
        <label class="rb-filter-label">Location</label>
        <select class="rb-select rb-select-sm" id="location-filter">
          <option value="">All Locations</option>
          <?php
          $locations = RB_Location::get_all_locations();
          foreach ($locations as $location) {
            echo sprintf('<option value="%d">%s</option>', $location->id, esc_html($location->name));
          }
          ?>
        </select>
      </div>
      
      <div class="rb-filter-group">
        <label class="rb-filter-label">Search</label>
        <div class="rb-search-input">
          <svg class="rb-search-icon" width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
            <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
          </svg>
          <input type="text" class="rb-input rb-input-sm" id="search-bookings" 
                 placeholder="Search customer name, phone, email...">
          <button class="rb-btn rb-btn-sm rb-btn-icon" id="clear-search" style="display: none;">
            <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
              <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
    
    <div class="rb-filters-actions">
      <button class="rb-btn rb-btn-sm rb-btn-outline" id="reset-filters">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/>
        </svg>
        Reset
      </button>
      
      <button class="rb-btn rb-btn-sm rb-btn-outline" id="export-bookings">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/>
          <polyline points="14,2 14,8 20,8"/>
          <line x1="16" y1="13" x2="8" y2="13"/>
          <line x1="16" y1="17" x2="8" y2="17"/>
          <polyline points="10,9 9,9 8,9"/>
        </svg>
        Export
      </button>
      
      <button class="rb-btn rb-btn-sm rb-btn-icon" id="refresh-bookings" title="Refresh">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/>
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Bulk Actions Bar -->
  <div class="rb-bulk-actions-bar" id="bulk-actions-bar" style="display: none;">
    <div class="rb-bulk-selection">
      <span class="rb-selected-count">0 bookings selected</span>
      <button class="rb-btn rb-btn-sm rb-btn-text" id="clear-selection">Clear selection</button>
    </div>
    
    <div class="rb-bulk-buttons">
      <button class="rb-btn rb-btn-sm rb-btn-success" id="bulk-confirm">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
        </svg>
        Confirm Selected
      </button>
      
      <button class="rb-btn rb-btn-sm rb-btn-warning" id="bulk-pending">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17Z"/>
        </svg>
        Mark Pending
      </button>
      
      <button class="rb-btn rb-btn-sm rb-btn-outline" id="bulk-email">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
        </svg>
        Send Reminders
      </button>
      
      <button class="rb-btn rb-btn-sm rb-btn-error" id="bulk-cancel">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
        </svg>
        Cancel Selected
      </button>
    </div>
  </div>
  
  <!-- Table View -->
  <div class="rb-table-view" id="table-view">
    <div class="rb-table-container">
      <table class="rb-bookings-table" id="bookings-table">
        <thead>
          <tr>
            <th class="rb-checkbox-col">
              <label class="rb-checkbox-label">
                <input type="checkbox" class="rb-checkbox" id="select-all-bookings">
                <span class="rb-checkbox-custom"></span>
              </label>
            </th>
            <th class="rb-customer-col rb-sortable" data-sort="customer_name">
              Customer
              <svg class="rb-sort-icon" width="12" height="12" fill="currentColor" viewBox="0 0 24 24">
                <path d="M7 14l5-5 5 5z"/>
              </svg>
            </th>
            <th class="rb-datetime-col rb-sortable" data-sort="booking_datetime">
              Date & Time
              <svg class="rb-sort-icon" width="12" height="12" fill="currentColor" viewBox="0 0 24 24">
                <path d="M7 14l5-5 5 5z"/>
              </svg>
            </th>
            <th class="rb-party-col rb-sortable" data-sort="party_size">
              Party Size
              <svg class="rb-sort-icon" width="12" height="12" fill="currentColor" viewBox="0 0 24 24">
                <path d="M7 14l5-5 5 5z"/>
              </svg>
            </th>
            <th class="rb-table-col rb-sortable" data-sort="table_number">
              Table
              <svg class="rb-sort-icon" width="12" height="12" fill="currentColor" viewBox="0 0 24 24">
                <path d="M7 14l5-5 5 5z"/>
              </svg>
            </th>
            <th class="rb-status-col rb-sortable" data-sort="status">
              Status
              <svg class="rb-sort-icon" width="12" height="12" fill="currentColor" viewBox="0 0 24 24">
                <path d="M7 14l5-5 5 5z"/>
              </svg>
            </th>
            <th class="rb-actions-col">Actions</th>
          </tr>
        </thead>
        <tbody id="bookings-table-body">
          <!-- Dynamic content loaded via AJAX -->
        </tbody>
      </table>
      
      <!-- Loading State -->
      <div class="rb-table-loading" id="table-loading" style="display: none;">
        <div class="rb-loading-spinner"></div>
        <span>Loading bookings...</span>
      </div>
      
      <!-- Empty State -->
      <div class="rb-table-empty" id="table-empty" style="display: none;">
        <div class="rb-empty-icon">
          <svg width="48" height="48" fill="currentColor" viewBox="0 0 24 24">
            <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
          </svg>
        </div>
        <h3 class="rb-empty-title">No bookings found</h3>
        <p class="rb-empty-description">No bookings match your current filters. Try adjusting your search criteria.</p>
        <button class="rb-btn rb-btn-primary" id="create-first-booking">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
          </svg>
          Create First Booking
        </button>
      </div>
    </div>
    
    <!-- Pagination -->
    <div class="rb-table-pagination" id="table-pagination">
      <div class="rb-pagination-info">
        <span>Showing <strong id="pagination-start">1</strong> to <strong id="pagination-end">25</strong> of <strong id="pagination-total">127</strong> bookings</span>
      </div>
      
      <div class="rb-pagination-controls">
        <button class="rb-btn rb-btn-sm rb-btn-outline" id="pagination-prev" disabled>
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
            <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
          </svg>
          Previous
        </button>
        
        <div class="rb-pagination-pages" id="pagination-pages">
          <!-- Dynamic page numbers -->
        </div>
        
        <button class="rb-btn rb-btn-sm rb-btn-outline" id="pagination-next">
          Next
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
            <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
          </svg>
        </button>
      </div>
      
      <div class="rb-pagination-size">
        <label>Per page:</label>
        <select class="rb-select rb-select-sm" id="pagination-size">
          <option value="25">25</option>
          <option value="50">50</option>
          <option value="100">100</option>
        </select>
      </div>
    </div>
  </div>
  
  <!-- Calendar View -->
  <div class="rb-calendar-view" id="calendar-view" style="display: none;">
    <?php include 'booking-calendar-view.php'; ?>
  </div>
</div>
📅 Calendar View Component
Calendar HTML Structure
html<div class="rb-calendar-container">
  <!-- Calendar Header -->
  <div class="rb-calendar-header">
    <div class="rb-calendar-nav">
      <button class="rb-btn rb-btn-sm rb-btn-icon" id="calendar-prev">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
        </svg>
      </button>
      
      <div class="rb-calendar-title">
        <h3 id="calendar-month-year">March 2024</h3>
      </div>
      
      <button class="rb-btn rb-btn-sm rb-btn-icon" id="calendar-next">
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
          <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
        </svg>
      </button>
    </div>
    
    <div class="rb-calendar-controls">
      <div class="rb-calendar-view-toggle">
        <button class="rb-btn rb-btn-sm rb-calendar-view-btn" data-view="month">Month</button>
        <button class="rb-btn rb-btn-sm rb-calendar-view-btn rb-active" data-view="week">Week</button>
        <button class="rb-btn rb-btn-sm rb-calendar-view-btn" data-view="day">Day</button>
      </div>
      
      <button class="rb-btn rb-btn-sm rb-btn-outline" id="calendar-today">Today</button>
    </div>
  </div>
  
  <!-- Calendar Grid -->
  <div class="rb-calendar-grid" id="calendar-grid">
    <!-- Week View Header -->
    <div class="rb-calendar-week-header">
      <div class="rb-calendar-day-header">Mon</div>
      <div class="rb-calendar-day-header">Tue</div>
      <div class="rb-calendar-day-header">Wed</div>
      <div class="rb-calendar-day-header">Thu</div>
      <div class="rb-calendar-day-header">Fri</div>
      <div class="rb-calendar-day-header">Sat</div>
      <div class="rb-calendar-day-header">Sun</div>
    </div>
    
    <!-- Calendar Days -->
    <div class="rb-calendar-days" id="calendar-days">
      <!-- Dynamic calendar days with bookings -->
    </div>
  </div>
  
  <!-- Calendar Legend -->
  <div class="rb-calendar-legend">
    <div class="rb-legend-item">
      <span class="rb-legend-color rb-legend-confirmed"></span>
      <span>Confirmed</span>
    </div>
    <div class="rb-legend-item">
      <span class="rb-legend-color rb-legend-pending"></span>
      <span>Pending</span>
    </div>
    <div class="rb-legend-item">
      <span class="rb-legend-color rb-legend-cancelled"></span>
      <span>Cancelled</span>
    </div>
    <div class="rb-legend-item">
      <span class="rb-legend-color rb-legend-no-show"></span>
      <span>No Show</span>
    </div>
  </div>
</div>
🎨 CSS Styling
Management Container
css.rb-booking-management {
  background: var(--rb-bg-secondary);
  min-height: 100vh;
  padding: var(--rb-space-6);
}

.rb-management-header {
  background: var(--rb-bg-primary);
  border: 1px solid var(--rb-border);
  border-radius: var(--rb-radius-lg);
  padding: var(--rb-space-6);
  margin-bottom: var(--rb-space-6);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.rb-page-title {
  font-size: var(--rb-text-2xl);
  font-weight: var(--rb-font-bold);
  color: var(--rb-text-primary);
  margin: 0 0 var(--rb-space-1) 0;
}

.rb-page-subtitle {
  font-size: var(--rb-text-base);
  color: var(--rb-text-secondary);
}

.rb-header-actions {
  display: flex;
  align-items: center;
  gap: var(--rb-space-4);
}

.rb-view-toggle {
  display: flex;
  background: var(--rb-bg-secondary);
  border-radius: var(--rb-radius);
  padding: var(--rb-space-1);
}

.rb-view-btn {
  display: flex;
  align-items: center;
  gap: var(--rb-space-2);
  border: none;
  background: transparent;
  color: var(--rb-text-secondary);
  padding: var(--rb-space-2) var(--rb-space-3);
  border-radius: var(--rb-radius-sm);
  transition: all var(--rb-transition-fast);
}

.rb-view-btn.rb-active {
  background: var(--rb-primary-500);
  color: white;
}

.rb-view-btn:hover:not(.rb-active) {
  background: var(--rb-gray-100);
  color: var(--rb-text-primary);
}
Filters Bar
css.rb-filters-bar {
  background: var(--rb-bg-primary);
  border: 1px solid var(--rb-border);
  border-radius: var(--rb-radius-lg);
  padding: var(--rb-space-6);
  margin-bottom: var(--rb-space-4);
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  gap: var(--rb-space-6);
}

.rb-filters-section {
  display: flex;
  gap: var(--rb-space-6);
  flex: 1;
}

.rb-filter-group {
  display: flex;
  flex-direction: column;
  gap: var(--rb-space-2);
}

.rb-filter-label {
  font-size: var(--rb-text-sm);
  font-weight: var(--rb-font-medium);
  color: var(--rb-text-primary);
}

.rb-date-range-picker {
  display: flex;
  align-items: center;
  gap: var(--rb-space-2);
}

.rb-date-separator {
  color: var(--rb-text-secondary);
  font-size: var(--rb-text-sm);
}

.rb-search-input {
  position: relative;
  display: flex;
  align-items: center;
}

.rb-search-icon {
  position: absolute;
  left: var(--rb-space-3);
  color: var(--rb-text-secondary);
  pointer-events: none;
}

.rb-search-input .rb-input {
  padding-left: var(--rb-space-10);
  padding-right: var(--rb-space-10);
  width: 280px;
}

.rb-search-input .rb-btn-icon {
  position: absolute;
  right: var(--rb-space-1);
}

.rb-filters-actions {
  display: flex;
  gap: var(--rb-space-3);
  align-items: center;
}
Bulk Actions Bar
css.rb-bulk-actions-bar {RetryVContinuecss.rb-bulk-actions-bar {
  background: var(--rb-primary-50);
  border: 1px solid var(--rb-primary-200);
  border-radius: var(--rb-radius-lg);
  padding: var(--rb-space-4) var(--rb-space-6);
  margin-bottom: var(--rb-space-4);
  display: flex;
  justify-content: space-between;
  align-items: center;
  animation: slideDown 0.3s ease-out;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.rb-bulk-selection {
  display: flex;
  align-items: center;
  gap: var(--rb-space-4);
}

.rb-selected-count {
  font-weight: var(--rb-font-medium);
  color: var(--rb-primary-700);
}

.rb-bulk-buttons {
  display: flex;
  gap: var(--rb-space-3);
}

.rb-btn-text {
  background: transparent;
  border: none;
  color: var(--rb-primary-600);
  text-decoration: underline;
  cursor: pointer;
  font-size: var(--rb-text-sm);
}

.rb-btn-text:hover {
  color: var(--rb-primary-700);
}
Bookings Table
css.rb-table-container {
  background: var(--rb-bg-primary);
  border: 1px solid var(--rb-border);
  border-radius: var(--rb-radius-lg);
  overflow: hidden;
}

.rb-bookings-table {
  width: 100%;
  border-collapse: collapse;
}

.rb-bookings-table thead {
  background: var(--rb-bg-secondary);
  border-bottom: 1px solid var(--rb-border);
}

.rb-bookings-table th {
  padding: var(--rb-space-4) var(--rb-space-3);
  text-align: left;
  font-weight: var(--rb-font-semibold);
  color: var(--rb-text-primary);
  font-size: var(--rb-text-sm);
  position: relative;
}

.rb-bookings-table th.rb-sortable {
  cursor: pointer;
  user-select: none;
  transition: background-color var(--rb-transition-fast);
}

.rb-bookings-table th.rb-sortable:hover {
  background: var(--rb-gray-100);
}

.rb-sort-icon {
  position: absolute;
  right: var(--rb-space-2);
  top: 50%;
  transform: translateY(-50%);
  opacity: 0.5;
  transition: all var(--rb-transition-fast);
}

.rb-bookings-table th.rb-sorted .rb-sort-icon {
  opacity: 1;
  color: var(--rb-primary-500);
}

.rb-bookings-table th.rb-sorted.rb-sort-desc .rb-sort-icon {
  transform: translateY(-50%) rotate(180deg);
}

.rb-bookings-table tbody tr {
  border-bottom: 1px solid var(--rb-border);
  transition: all var(--rb-transition-fast);
}

.rb-bookings-table tbody tr:hover {
  background: var(--rb-gray-50);
}

.rb-bookings-table tbody tr.rb-selected {
  background: var(--rb-primary-50);
  border-color: var(--rb-primary-200);
}

.rb-bookings-table td {
  padding: var(--rb-space-4) var(--rb-space-3);
  vertical-align: middle;
}

.rb-checkbox-col {
  width: 40px;
}

.rb-customer-col {
  min-width: 200px;
}

.rb-datetime-col {
  min-width: 150px;
}

.rb-party-col {
  width: 100px;
}

.rb-table-col {
  width: 100px;
}

.rb-status-col {
  width: 120px;
}

.rb-actions-col {
  width: 160px;
}

/* Customer Cell */
.rb-customer-cell {
  display: flex;
  align-items: center;
  gap: var(--rb-space-3);
}

.rb-customer-avatar {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: var(--rb-primary-100);
  color: var(--rb-primary-600);
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: var(--rb-font-semibold);
  font-size: var(--rb-text-sm);
}

.rb-customer-info {
  flex: 1;
}

.rb-customer-name {
  font-weight: var(--rb-font-medium);
  color: var(--rb-text-primary);
  margin-bottom: var(--rb-space-1);
}

.rb-customer-contact {
  font-size: var(--rb-text-xs);
  color: var(--rb-text-secondary);
}

/* Status Badges */
.rb-status-badge {
  display: inline-flex;
  align-items: center;
  gap: var(--rb-space-1);
  padding: var(--rb-space-1) var(--rb-space-2);
  border-radius: var(--rb-radius-full);
  font-size: var(--rb-text-xs);
  font-weight: var(--rb-font-medium);
}

.rb-status-confirmed {
  background: rgba(16, 185, 129, 0.1);
  color: var(--rb-success);
}

.rb-status-pending {
  background: rgba(245, 158, 11, 0.1);
  color: var(--rb-warning);
}

.rb-status-cancelled {
  background: rgba(239, 68, 68, 0.1);
  color: var(--rb-error);
}

.rb-status-completed {
  background: rgba(59, 130, 246, 0.1);
  color: var(--rb-primary-500);
}

.rb-status-no-show {
  background: rgba(107, 114, 128, 0.1);
  color: var(--rb-gray-600);
}

.rb-status-indicator {
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background: currentColor;
}

/* Action Buttons */
.rb-action-buttons {
  display: flex;
  gap: var(--rb-space-1);
}

.rb-action-btn {
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid var(--rb-border);
  border-radius: var(--rb-radius);
  background: var(--rb-bg-primary);
  color: var(--rb-text-secondary);
  cursor: pointer;
  transition: all var(--rb-transition-fast);
}

.rb-action-btn:hover {
  border-color: var(--rb-primary-300);
  color: var(--rb-primary-500);
  transform: translateY(-1px);
}

.rb-action-btn.rb-action-view:hover {
  border-color: var(--rb-primary-300);
  color: var(--rb-primary-500);
}

.rb-action-btn.rb-action-edit:hover {
  border-color: var(--rb-warning);
  color: var(--rb-warning);
}

.rb-action-btn.rb-action-delete:hover {
  border-color: var(--rb-error);
  color: var(--rb-error);
}

.rb-action-btn.rb-action-confirm:hover {
  border-color: var(--rb-success);
  color: var(--rb-success);
}

/* Table States */
.rb-table-loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--rb-space-12);
  color: var(--rb-text-secondary);
  gap: var(--rb-space-3);
}

.rb-table-empty {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--rb-space-12);
  text-align: center;
  color: var(--rb-text-secondary);
}

.rb-empty-icon {
  margin-bottom: var(--rb-space-4);
  opacity: 0.5;
}

.rb-empty-title {
  color: var(--rb-text-primary);
  margin: 0 0 var(--rb-space-2) 0;
}

.rb-empty-description {
  margin: 0 0 var(--rb-space-6) 0;
  max-width: 400px;
}
Pagination Styles
css.rb-table-pagination {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--rb-space-4) var(--rb-space-6);
  background: var(--rb-bg-primary);
  border: 1px solid var(--rb-border);
  border-top: none;
  border-radius: 0 0 var(--rb-radius-lg) var(--rb-radius-lg);
}

.rb-pagination-info {
  color: var(--rb-text-secondary);
  font-size: var(--rb-text-sm);
}

.rb-pagination-controls {
  display: flex;
  align-items: center;
  gap: var(--rb-space-2);
}

.rb-pagination-pages {
  display: flex;
  gap: var(--rb-space-1);
}

.rb-pagination-page {
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid var(--rb-border);
  border-radius: var(--rb-radius);
  background: var(--rb-bg-primary);
  color: var(--rb-text-secondary);
  cursor: pointer;
  transition: all var(--rb-transition-fast);
  font-size: var(--rb-text-sm);
}

.rb-pagination-page:hover {
  border-color: var(--rb-primary-300);
  color: var(--rb-primary-500);
}

.rb-pagination-page.rb-active {
  background: var(--rb-primary-500);
  border-color: var(--rb-primary-500);
  color: white;
}

.rb-pagination-page.rb-disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.rb-pagination-size {
  display: flex;
  align-items: center;
  gap: var(--rb-space-2);
  font-size: var(--rb-text-sm);
  color: var(--rb-text-secondary);
}
Calendar View Styles
css.rb-calendar-container {
  background: var(--rb-bg-primary);
  border: 1px solid var(--rb-border);
  border-radius: var(--rb-radius-lg);
  overflow: hidden;
}

.rb-calendar-header {
  background: var(--rb-bg-secondary);
  border-bottom: 1px solid var(--rb-border);
  padding: var(--rb-space-6);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.rb-calendar-nav {
  display: flex;
  align-items: center;
  gap: var(--rb-space-4);
}

.rb-calendar-title h3 {
  margin: 0;
  color: var(--rb-text-primary);
  font-size: var(--rb-text-xl);
  font-weight: var(--rb-font-semibold);
}

.rb-calendar-controls {
  display: flex;
  align-items: center;
  gap: var(--rb-space-4);
}

.rb-calendar-view-toggle {
  display: flex;
  background: var(--rb-bg-primary);
  border-radius: var(--rb-radius);
  padding: var(--rb-space-1);
}

.rb-calendar-view-btn {
  border: none;
  background: transparent;
  color: var(--rb-text-secondary);
  padding: var(--rb-space-2) var(--rb-space-3);
  border-radius: var(--rb-radius-sm);
  transition: all var(--rb-transition-fast);
}

.rb-calendar-view-btn.rb-active {
  background: var(--rb-primary-500);
  color: white;
}

.rb-calendar-grid {
  padding: var(--rb-space-6);
}

.rb-calendar-week-header {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: var(--rb-space-2);
  margin-bottom: var(--rb-space-4);
}

.rb-calendar-day-header {
  text-align: center;
  font-weight: var(--rb-font-semibold);
  color: var(--rb-text-secondary);
  font-size: var(--rb-text-sm);
  padding: var(--rb-space-2);
}

.rb-calendar-days {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: var(--rb-space-2);
}

.rb-calendar-day {
  min-height: 120px;
  border: 1px solid var(--rb-border);
  border-radius: var(--rb-radius);
  padding: var(--rb-space-2);
  cursor: pointer;
  transition: all var(--rb-transition-fast);
  position: relative;
}

.rb-calendar-day:hover {
  border-color: var(--rb-primary-300);
  box-shadow: var(--rb-shadow-sm);
}

.rb-calendar-day-number {
  font-weight: var(--rb-font-medium);
  color: var(--rb-text-primary);
  margin-bottom: var(--rb-space-2);
}

.rb-calendar-day.rb-other-month .rb-calendar-day-number {
  color: var(--rb-text-secondary);
  opacity: 0.5;
}

.rb-calendar-day.rb-today {
  border-color: var(--rb-primary-500);
  background: var(--rb-primary-50);
}

.rb-calendar-day.rb-today .rb-calendar-day-number {
  color: var(--rb-primary-500);
  font-weight: var(--rb-font-bold);
}

.rb-calendar-bookings {
  display: flex;
  flex-direction: column;
  gap: var(--rb-space-1);
}

.rb-calendar-booking {
  background: var(--rb-primary-100);
  color: var(--rb-primary-700);
  padding: var(--rb-space-1) var(--rb-space-2);
  border-radius: var(--rb-radius-sm);
  font-size: var(--rb-text-xs);
  font-weight: var(--rb-font-medium);
  cursor: pointer;
  transition: all var(--rb-transition-fast);
}

.rb-calendar-booking:hover {
  background: var(--rb-primary-200);
  transform: translateY(-1px);
}

.rb-calendar-booking.rb-confirmed {
  background: rgba(16, 185, 129, 0.2);
  color: var(--rb-success);
}

.rb-calendar-booking.rb-pending {
  background: rgba(245, 158, 11, 0.2);
  color: var(--rb-warning);
}

.rb-calendar-booking.rb-cancelled {
  background: rgba(239, 68, 68, 0.2);
  color: var(--rb-error);
}

.rb-calendar-booking-count {
  position: absolute;
  top: var(--rb-space-2);
  right: var(--rb-space-2);
  background: var(--rb-primary-500);
  color: white;
  font-size: var(--rb-text-xs);
  font-weight: var(--rb-font-bold);
  padding: 2px 6px;
  border-radius: var(--rb-radius-full);
  min-width: 20px;
  text-align: center;
}

.rb-calendar-legend {
  display: flex;
  justify-content: center;
  gap: var(--rb-space-6);
  padding: var(--rb-space-4) var(--rb-space-6);
  border-top: 1px solid var(--rb-border);
  background: var(--rb-bg-secondary);
}

.rb-legend-item {
  display: flex;
  align-items: center;
  gap: var(--rb-space-2);
  font-size: var(--rb-text-sm);
  color: var(--rb-text-secondary);
}

.rb-legend-color {
  width: 12px;
  height: 12px;
  border-radius: var(--rb-radius-sm);
}

.rb-legend-confirmed {
  background: var(--rb-success);
}

.rb-legend-pending {
  background: var(--rb-warning);
}

.rb-legend-cancelled {
  background: var(--rb-error);
}

.rb-legend-no-show {
  background: var(--rb-gray-500);
}
💻 JavaScript Management System
Main Booking Management Class
javascriptclass BookingManagement {
  constructor() {
    this.currentView = 'table';
    this.currentPage = 1;
    this.pageSize = 25;
    this.sortBy = 'booking_datetime';
    this.sortOrder = 'desc';
    this.filters = {
      dateFrom: '',
      dateTo: '',
      status: '',
      location: '',
      search: ''
    };
    this.selectedBookings = new Set();
    
    this.ajaxUrl = rbBookingManagement.ajax_url;
    this.nonce = rbBookingManagement.nonce;
    
    this.tableManager = new BookingTableManager(this);
    this.calendarManager = new BookingCalendarManager(this);
    this.filterManager = new BookingFilterManager(this);
    this.bulkActions = new BulkActionsManager(this);
    
    this.init();
  }
  
  init() {
    this.bindEvents();
    this.initializeFilters();
    this.loadBookings();
    this.startAutoRefresh();
  }
  
  bindEvents() {
    // View toggle
    document.querySelectorAll('.rb-view-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        this.switchView(e.target.dataset.view);
      });
    });
    
    // Add booking button
    document.getElementById('add-booking-btn')?.addEventListener('click', () => {
      this.openAddBookingModal();
    });
    
    // Refresh button
    document.getElementById('refresh-bookings')?.addEventListener('click', () => {
      this.loadBookings();
    });
    
    // Export button
    document.getElementById('export-bookings')?.addEventListener('click', () => {
      this.exportBookings();
    });
    
    // Select all checkbox
    document.getElementById('select-all-bookings')?.addEventListener('change', (e) => {
      this.toggleSelectAll(e.target.checked);
    });
  }
  
  switchView(view) {
    this.currentView = view;
    
    // Update active button
    document.querySelectorAll('.rb-view-btn').forEach(btn => {
      btn.classList.toggle('rb-active', btn.dataset.view === view);
    });
    
    // Show/hide views
    document.getElementById('table-view').style.display = view === 'table' ? 'block' : 'none';
    document.getElementById('calendar-view').style.display = view === 'calendar' ? 'block' : 'none';
    
    // Load appropriate data
    if (view === 'calendar') {
      this.calendarManager.loadCalendarData();
    } else {
      this.loadBookings();
    }
  }
  
  initializeFilters() {
    // Set default date range (today + 7 days)
    const today = new Date();
    const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);
    
    this.filters.dateFrom = today.toISOString().split('T')[0];
    this.filters.dateTo = nextWeek.toISOString().split('T')[0];
    
    // Update filter inputs
    document.getElementById('date-from').value = this.filters.dateFrom;
    document.getElementById('date-to').value = this.filters.dateTo;
  }
  
  async loadBookings() {
    this.showLoading(true);
    
    try {
      const response = await fetch(this.ajaxUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          action: 'rb_get_bookings_list',
          nonce: this.nonce,
          page: this.currentPage,
          page_size: this.pageSize,
          sort_by: this.sortBy,
          sort_order: this.sortOrder,
          ...this.filters
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        this.tableManager.renderBookings(data.data.bookings);
        this.updatePagination(data.data.pagination);
        this.clearSelection();
      } else {
        this.showError(data.message);
      }
    } catch (error) {
      this.showError('Failed to load bookings');
    } finally {
      this.showLoading(false);
    }
  }
  
  async updateBookingStatus(bookingId, status) {
    try {
      const response = await fetch(this.ajaxUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          action: 'rb_update_booking_status',
          nonce: this.nonce,
          booking_id: bookingId,
          status: status
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        this.loadBookings(); // Refresh the table
        this.showSuccess('Booking status updated successfully');
      } else {
        this.showError(data.message);
      }
    } catch (error) {
      this.showError('Failed to update booking status');
    }
  }
  
  async deleteBooking(bookingId) {
    if (!confirm('Are you sure you want to delete this booking?')) {
      return;
    }
    
    try {
      const response = await fetch(this.ajaxUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          action: 'rb_delete_booking',
          nonce: this.nonce,
          booking_id: bookingId
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        this.loadBookings();
        this.showSuccess('Booking deleted successfully');
      } else {
        this.showError(data.message);
      }
    } catch (error) {
      this.showError('Failed to delete booking');
    }
  }
  
  toggleSelectAll(checked) {
    const checkboxes = document.querySelectorAll('.rb-booking-checkbox');
    checkboxes.forEach(checkbox => {
      checkbox.checked = checked;
      const bookingId = checkbox.dataset.bookingId;
      if (checked) {
        this.selectedBookings.add(bookingId);
      } else {
        this.selectedBookings.delete(bookingId);
      }
    });
    
    this.updateBulkActions();
  }
  
  toggleBookingSelection(bookingId, checked) {
    if (checked) {
      this.selectedBookings.add(bookingId);
    } else {
      this.selectedBookings.delete(bookingId);
    }
    
    this.updateBulkActions();
    this.updateSelectAllState();
  }
  
  updateBulkActions() {
    const bulkBar = document.getElementById('bulk-actions-bar');
    const count = this.selectedBookings.size;
    
    if (count > 0) {
      bulkBar.style.display = 'flex';
      document.querySelector('.rb-selected-count').textContent = `${count} booking${count > 1 ? 's' : ''} selected`;
    } else {
      bulkBar.style.display = 'none';
    }
  }
  
  clearSelection() {
    this.selectedBookings.clear();
    document.querySelectorAll('.rb-booking-checkbox').forEach(checkbox => {
      checkbox.checked = false;
    });
    this.updateBulkActions();
    this.updateSelectAllState();
  }
  
  updateSelectAllState() {
    const selectAllCheckbox = document.getElementById('select-all-bookings');
    const totalCheckboxes = document.querySelectorAll('.rb-booking-checkbox').length;
    const checkedCount = this.selectedBookings.size;
    
    if (checkedCount === 0) {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = false;
    } else if (checkedCount === totalCheckboxes) {
      selectAllCheckbox.checked = true;
      selectAllCheckbox.indeterminate = false;
    } else {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = true;
    }
  }
  
  showLoading(show) {
    const loading = document.getElementById('table-loading');
    const table = document.getElementById('bookings-table');
    
    if (loading && table) {
      loading.style.display = show ? 'flex' : 'none';
      table.style.display = show ? 'none' : 'table';
    }
  }
  
  showError(message) {
    // Implement toast notification or alert
    console.error('Booking Management Error:', message);
  }
  
  showSuccess(message) {
    // Implement toast notification
    console.log('Success:', message);
  }
  
  startAutoRefresh() {
    // Refresh every 30 seconds
    setInterval(() => {
      if (this.currentView === 'table') {
        this.loadBookings();
      } else {
        this.calendarManager.loadCalendarData();
      }
    }, 30000);
  }
  
  openAddBookingModal() {
    // Implementation for adding new booking
    console.log('Opening add booking modal');
  }
  
  async exportBookings() {
    try {
      const response = await fetch(this.ajaxUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          action: 'rb_export_bookings',
          nonce: this.nonce,
          ...this.filters
        })
      });
      
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `bookings-export-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
      }
    } catch (error) {
      this.showError('Failed to export bookings');
    }
  }
}

// Booking Table Manager
class BookingTableManager {
  constructor(parent) {
    this.parent = parent;
    this.bindTableEvents();
  }
  
  bindTableEvents() {
    // Sort headers
    document.querySelectorAll('.rb-sortable').forEach(header => {
      header.addEventListener('click', (e) => {
        this.handleSort(e.target.dataset.sort);
      });
    });
    
    // Pagination
    document.addEventListener('click', (e) => {
      if (e.target.matches('.rb-pagination-page')) {
        this.handlePageChange(parseInt(e.target.dataset.page));
      }
    });
    
    // Page size change
    document.getElementById('pagination-size')?.addEventListener('change', (e) => {
      this.parent.pageSize = parseInt(e.target.value);
      this.parent.currentPage = 1;
      this.parent.loadBookings();
    });
  }
  
  handleSort(sortBy) {
    if (this.parent.sortBy === sortBy) {
      this.parent.sortOrder = this.parent.sortOrder === 'asc' ? 'desc' : 'asc';
    } else {
      this.parent.sortBy = sortBy;
      this.parent.sortOrder = 'asc';
    }
    
    this.updateSortIndicators();
    this.parent.loadBookings();
  }
  
  updateSortIndicators() {
    document.querySelectorAll('.rb-sortable').forEach(header => {
      header.classList.remove('rb-sorted', 'rb-sort-asc', 'rb-sort-desc');
      
      if (header.dataset.sort === this.parent.sortBy) {
        header.classList.add('rb-sorted', `rb-sort-${this.parent.sortOrder}`);
      }
    });
  }
  
  renderBookings(bookings) {
    const tbody = document.getElementById('bookings-table-body');
    const emptyState = document.getElementById('table-empty');
    
    if (bookings.length === 0) {
      tbody.innerHTML = '';
      emptyState.style.display = 'flex';
      return;
    }
    
    emptyState.style.display = 'none';
    
    tbody.innerHTML = bookings.map(booking => this.renderBookingRow(booking)).join('');
    
    // Bind row events
    this.bindRowEvents();
  }
  
  renderBookingRow(booking) {
    const avatar = this.generateAvatar(booking.customer_name);
    const statusClass = `rb-status-${booking.status.toLowerCase().replace(' ', '-')}`;
    
    return `
      <tr class="rb-booking-row" data-booking-id="${booking.id}">
        <td class="rb-checkbox-col">
          <label class="RetryVContinuejavascript        <td class="rb-checkbox-col">
          <label class="rb-checkbox-label">
            <input type="checkbox" class="rb-checkbox rb-booking-checkbox" 
                   data-booking-id="${booking.id}">
            <span class="rb-checkbox-custom"></span>
          </label>
        </td>
        <td class="rb-customer-col">
          <div class="rb-customer-cell">
            <div class="rb-customer-avatar">${avatar}</div>
            <div class="rb-customer-info">
              <div class="rb-customer-name">${booking.customer_name}</div>
              <div class="rb-customer-contact">${booking.email} • ${booking.phone}</div>
            </div>
          </div>
        </td>
        <td class="rb-datetime-col">
          <div class="rb-datetime-info">
            <div class="rb-booking-date">${this.formatDate(booking.booking_date)}</div>
            <div class="rb-booking-time">${this.formatTime(booking.booking_time)}</div>
          </div>
        </td>
        <td class="rb-party-col">
          <span class="rb-party-size">${booking.party_size} ${booking.party_size > 1 ? 'people' : 'person'}</span>
        </td>
        <td class="rb-table-col">
          <span class="rb-table-number">Table ${booking.table_number || 'TBD'}</span>
        </td>
        <td class="rb-status-col">
          <span class="rb-status-badge ${statusClass}">
            <span class="rb-status-indicator"></span>
            ${booking.status}
          </span>
        </td>
        <td class="rb-actions-col">
          <div class="rb-action-buttons">
            <button class="rb-action-btn rb-action-view" data-action="view" 
                    data-booking-id="${booking.id}" title="View Details">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
              </svg>
            </button>
            <button class="rb-action-btn rb-action-edit" data-action="edit" 
                    data-booking-id="${booking.id}" title="Edit Booking">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
              </svg>
            </button>
            ${booking.status === 'pending' ? `
              <button class="rb-action-btn rb-action-confirm" data-action="confirm" 
                      data-booking-id="${booking.id}" title="Confirm Booking">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                </svg>
              </button>
            ` : ''}
            <button class="rb-action-btn rb-action-delete" data-action="delete" 
                    data-booking-id="${booking.id}" title="Cancel/Delete">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
              </svg>
            </button>
          </div>
        </td>
      </tr>
    `;
  }
  
  bindRowEvents() {
    // Checkbox selection
    document.querySelectorAll('.rb-booking-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        const bookingId = e.target.dataset.bookingId;
        this.parent.toggleBookingSelection(bookingId, e.target.checked);
      });
    });
    
    // Action buttons
    document.querySelectorAll('.rb-action-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const action = e.currentTarget.dataset.action;
        const bookingId = e.currentTarget.dataset.bookingId;
        this.handleRowAction(action, bookingId);
      });
    });
  }
  
  handleRowAction(action, bookingId) {
    switch (action) {
      case 'view':
        this.openBookingDetails(bookingId);
        break;
      case 'edit':
        this.openEditBooking(bookingId);
        break;
      case 'confirm':
        this.parent.updateBookingStatus(bookingId, 'confirmed');
        break;
      case 'delete':
        this.parent.deleteBooking(bookingId);
        break;
    }
  }
  
  openBookingDetails(bookingId) {
    // Implementation for booking details modal
    console.log('Opening booking details for:', bookingId);
  }
  
  openEditBooking(bookingId) {
    // Implementation for edit booking modal
    console.log('Opening edit booking for:', bookingId);
  }
  
  generateAvatar(name) {
    const initials = name.split(' ').map(n => n[0]).join('').toUpperCase();
    return initials.substring(0, 2);
  }
  
  formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      year: 'numeric'
    });
  }
  
  formatTime(timeString) {
    const time = new Date(`2000-01-01 ${timeString}`);
    return time.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true
    });
  }
  
  handlePageChange(page) {
    this.parent.currentPage = page;
    this.parent.loadBookings();
  }
}

// Booking Filter Manager
class BookingFilterManager {
  constructor(parent) {
    this.parent = parent;
    this.bindFilterEvents();
  }
  
  bindFilterEvents() {
    // Date filters
    document.getElementById('date-from')?.addEventListener('change', (e) => {
      this.parent.filters.dateFrom = e.target.value;
      this.applyFilters();
    });
    
    document.getElementById('date-to')?.addEventListener('change', (e) => {
      this.parent.filters.dateTo = e.target.value;
      this.applyFilters();
    });
    
    // Status filter
    document.getElementById('status-filter')?.addEventListener('change', (e) => {
      this.parent.filters.status = e.target.value;
      this.applyFilters();
    });
    
    // Location filter
    document.getElementById('location-filter')?.addEventListener('change', (e) => {
      this.parent.filters.location = e.target.value;
      this.applyFilters();
    });
    
    // Search input with debounce
    let searchTimeout;
    document.getElementById('search-bookings')?.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        this.parent.filters.search = e.target.value;
        this.applyFilters();
        this.toggleClearButton(e.target.value);
      }, 500);
    });
    
    // Clear search button
    document.getElementById('clear-search')?.addEventListener('click', () => {
      this.clearSearch();
    });
    
    // Reset filters button
    document.getElementById('reset-filters')?.addEventListener('click', () => {
      this.resetFilters();
    });
  }
  
  applyFilters() {
    this.parent.currentPage = 1; // Reset to first page
    this.parent.loadBookings();
  }
  
  toggleClearButton(searchValue) {
    const clearBtn = document.getElementById('clear-search');
    if (clearBtn) {
      clearBtn.style.display = searchValue ? 'block' : 'none';
    }
  }
  
  clearSearch() {
    const searchInput = document.getElementById('search-bookings');
    if (searchInput) {
      searchInput.value = '';
      this.parent.filters.search = '';
      this.toggleClearButton('');
      this.applyFilters();
    }
  }
  
  resetFilters() {
    // Reset all filter values
    this.parent.filters = {
      dateFrom: '',
      dateTo: '',
      status: '',
      location: '',
      search: ''
    };
    
    // Reset form inputs
    document.getElementById('date-from').value = '';
    document.getElementById('date-to').value = '';
    document.getElementById('status-filter').value = '';
    document.getElementById('location-filter').value = '';
    document.getElementById('search-bookings').value = '';
    
    this.toggleClearButton('');
    this.parent.initializeFilters(); // Set default date range
    this.applyFilters();
  }
}

// Bulk Actions Manager
class BulkActionsManager {
  constructor(parent) {
    this.parent = parent;
    this.bindBulkEvents();
  }
  
  bindBulkEvents() {
    // Clear selection
    document.getElementById('clear-selection')?.addEventListener('click', () => {
      this.parent.clearSelection();
    });
    
    // Bulk confirm
    document.getElementById('bulk-confirm')?.addEventListener('click', () => {
      this.bulkUpdateStatus('confirmed');
    });
    
    // Bulk pending
    document.getElementById('bulk-pending')?.addEventListener('click', () => {
      this.bulkUpdateStatus('pending');
    });
    
    // Bulk cancel
    document.getElementById('bulk-cancel')?.addEventListener('click', () => {
      this.bulkUpdateStatus('cancelled');
    });
    
    // Bulk email
    document.getElementById('bulk-email')?.addEventListener('click', () => {
      this.sendBulkReminders();
    });
  }
  
  async bulkUpdateStatus(status) {
    const selectedIds = Array.from(this.parent.selectedBookings);
    
    if (selectedIds.length === 0) {
      this.parent.showError('No bookings selected');
      return;
    }
    
    const action = status === 'cancelled' ? 'cancel' : 'update';
    const confirmMessage = status === 'cancelled' 
      ? `Are you sure you want to cancel ${selectedIds.length} booking(s)?`
      : `Are you sure you want to mark ${selectedIds.length} booking(s) as ${status}?`;
    
    if (!confirm(confirmMessage)) {
      return;
    }
    
    try {
      const response = await fetch(this.parent.ajaxUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          action: 'rb_bulk_update_bookings',
          nonce: this.parent.nonce,
          booking_ids: selectedIds.join(','),
          status: status
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        this.parent.loadBookings();
        this.parent.showSuccess(`${selectedIds.length} booking(s) updated successfully`);
      } else {
        this.parent.showError(data.message);
      }
    } catch (error) {
      this.parent.showError('Failed to update bookings');
    }
  }
  
  async sendBulkReminders() {
    const selectedIds = Array.from(this.parent.selectedBookings);
    
    if (selectedIds.length === 0) {
      this.parent.showError('No bookings selected');
      return;
    }
    
    if (!confirm(`Send reminder emails to ${selectedIds.length} customer(s)?`)) {
      return;
    }
    
    try {
      const response = await fetch(this.parent.ajaxUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          action: 'rb_send_bulk_reminders',
          nonce: this.parent.nonce,
          booking_ids: selectedIds.join(',')
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        this.parent.showSuccess(`Reminder emails sent to ${selectedIds.length} customer(s)`);
        this.parent.clearSelection();
      } else {
        this.parent.showError(data.message);
      }
    } catch (error) {
      this.parent.showError('Failed to send reminders');
    }
  }
}

// Calendar Manager
class BookingCalendarManager {
  constructor(parent) {
    this.parent = parent;
    this.currentDate = new Date();
    this.calendarView = 'month';
    this.calendarData = {};
    
    this.bindCalendarEvents();
  }
  
  bindCalendarEvents() {
    // Calendar navigation
    document.getElementById('calendar-prev')?.addEventListener('click', () => {
      this.navigateCalendar(-1);
    });
    
    document.getElementById('calendar-next')?.addEventListener('click', () => {
      this.navigateCalendar(1);
    });
    
    document.getElementById('calendar-today')?.addEventListener('click', () => {
      this.goToToday();
    });
    
    // Calendar view toggle
    document.querySelectorAll('.rb-calendar-view-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        this.changeCalendarView(e.target.dataset.view);
      });
    });
  }
  
  async loadCalendarData() {
    try {
      const response = await fetch(this.parent.ajaxUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          action: 'rb_get_calendar_data',
          nonce: this.parent.nonce,
          month: this.currentDate.getMonth() + 1,
          year: this.currentDate.getFullYear(),
          view: this.calendarView,
          ...this.parent.filters
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        this.calendarData = data.data;
        this.renderCalendar();
      } else {
        this.parent.showError(data.message);
      }
    } catch (error) {
      this.parent.showError('Failed to load calendar data');
    }
  }
  
  renderCalendar() {
    this.updateCalendarHeader();
    this.renderCalendarDays();
  }
  
  updateCalendarHeader() {
    const monthYear = document.getElementById('calendar-month-year');
    if (monthYear) {
      monthYear.textContent = this.currentDate.toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric'
      });
    }
  }
  
  renderCalendarDays() {
    const calendarDays = document.getElementById('calendar-days');
    if (!calendarDays) return;
    
    const startDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
    const endDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
    const startDay = startDate.getDay() === 0 ? 7 : startDate.getDay(); // Monday = 1
    
    let calendarHTML = '';
    
    // Previous month days
    const prevMonthEnd = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 0);
    for (let i = startDay - 1; i > 0; i--) {
      const day = prevMonthEnd.getDate() - i + 1;
      calendarHTML += this.renderCalendarDay(day, true, 'prev');
    }
    
    // Current month days
    for (let day = 1; day <= endDate.getDate(); day++) {
      calendarHTML += this.renderCalendarDay(day, false, 'current');
    }
    
    // Next month days to fill the grid
    const totalCells = calendarDays.children.length || 42; // 6 weeks * 7 days
    const currentCells = (startDay - 1) + endDate.getDate();
    const remainingCells = totalCells - currentCells;
    
    for (let day = 1; day <= remainingCells; day++) {
      calendarHTML += this.renderCalendarDay(day, true, 'next');
    }
    
    calendarDays.innerHTML = calendarHTML;
    this.bindCalendarDayEvents();
  }
  
  renderCalendarDay(day, isOtherMonth, monthType) {
    const dateKey = this.getDateKey(day, monthType);
    const dayData = this.calendarData[dateKey] || { bookings: [], count: 0 };
    const isToday = this.isToday(day, monthType);
    
    let dayClasses = 'rb-calendar-day';
    if (isOtherMonth) dayClasses += ' rb-other-month';
    if (isToday) dayClasses += ' rb-today';
    
    const bookingsHTML = dayData.bookings.slice(0, 3).map(booking => 
      `<div class="rb-calendar-booking rb-${booking.status}" data-booking-id="${booking.id}">
        ${booking.time} - ${booking.customer_name}
      </div>`
    ).join('');
    
    const countBadge = dayData.count > 3 
      ? `<div class="rb-calendar-booking-count">+${dayData.count - 3}</div>`
      : '';
    
    return `
      <div class="${dayClasses}" data-date="${dateKey}">
        <div class="rb-calendar-day-number">${day}</div>
        <div class="rb-calendar-bookings">
          ${bookingsHTML}
        </div>
        ${countBadge}
      </div>
    `;
  }
  
  bindCalendarDayEvents() {
    // Calendar day clicks
    document.querySelectorAll('.rb-calendar-day').forEach(day => {
      day.addEventListener('click', (e) => {
        const date = e.currentTarget.dataset.date;
        this.openDayView(date);
      });
    });
    
    // Booking clicks
    document.querySelectorAll('.rb-calendar-booking').forEach(booking => {
      booking.addEventListener('click', (e) => {
        e.stopPropagation();
        const bookingId = e.currentTarget.dataset.bookingId;
        this.openBookingDetails(bookingId);
      });
    });
  }
  
  navigateCalendar(direction) {
    this.currentDate.setMonth(this.currentDate.getMonth() + direction);
    this.loadCalendarData();
  }
  
  goToToday() {
    this.currentDate = new Date();
    this.loadCalendarData();
  }
  
  changeCalendarView(view) {
    this.calendarView = view;
    
    // Update active button
    document.querySelectorAll('.rb-calendar-view-btn').forEach(btn => {
      btn.classList.toggle('rb-active', btn.dataset.view === view);
    });
    
    this.loadCalendarData();
  }
  
  getDateKey(day, monthType) {
    let date = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), day);
    
    if (monthType === 'prev') {
      date = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 1, day);
    } else if (monthType === 'next') {
      date = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, day);
    }
    
    return date.toISOString().split('T')[0];
  }
  
  isToday(day, monthType) {
    const today = new Date();
    const date = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), day);
    
    if (monthType === 'prev') {
      date.setMonth(date.getMonth() - 1);
    } else if (monthType === 'next') {
      date.setMonth(date.getMonth() + 1);
    }
    
    return date.toDateString() === today.toDateString();
  }
  
  openDayView(date) {
    // Implementation for day detail view
    console.log('Opening day view for:', date);
  }
  
  openBookingDetails(bookingId) {
    // Implementation for booking details modal
    console.log('Opening booking details for:', bookingId);
  }
}

// Update pagination display
BookingManagement.prototype.updatePagination = function(pagination) {
  // Update pagination info
  document.getElementById('pagination-start').textContent = pagination.start;
  document.getElementById('pagination-end').textContent = pagination.end;
  document.getElementById('pagination-total').textContent = pagination.total;
  
  // Update pagination controls
  const prevBtn = document.getElementById('pagination-prev');
  const nextBtn = document.getElementById('pagination-next');
  
  if (prevBtn) {
    prevBtn.disabled = pagination.current_page <= 1;
  }
  
  if (nextBtn) {
    nextBtn.disabled = pagination.current_page >= pagination.total_pages;
  }
  
  // Render page numbers
  this.renderPaginationPages(pagination);
};

BookingManagement.prototype.renderPaginationPages = function(pagination) {
  const pagesContainer = document.getElementById('pagination-pages');
  if (!pagesContainer) return;
  
  let pagesHTML = '';
  const current = pagination.current_page;
  const total = pagination.total_pages;
  
  // Always show first page
  if (current > 3) {
    pagesHTML += `<button class="rb-pagination-page" data-page="1">1</button>`;
    if (current > 4) {
      pagesHTML += `<span class="rb-pagination-ellipsis">...</span>`;
    }
  }
  
  // Show pages around current page
  const start = Math.max(1, current - 2);
  const end = Math.min(total, current + 2);
  
  for (let i = start; i <= end; i++) {
    const activeClass = i === current ? ' rb-active' : '';
    pagesHTML += `<button class="rb-pagination-page${activeClass}" data-page="${i}">${i}</button>`;
  }
  
  // Always show last page
  if (current < total - 2) {
    if (current < total - 3) {
      pagesHTML += `<span class="rb-pagination-ellipsis">...</span>`;
    }
    pagesHTML += `<button class="rb-pagination-page" data-page="${total}">${total}</button>`;
  }
  
  pagesContainer.innerHTML = pagesHTML;
};

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  if (document.querySelector('.rb-booking-management')) {
    new BookingManagement();
  }
});
🔧 WordPress Integration
Modern Booking Manager Class
php<?php
// public/class-modern-booking-manager.php

class RB_Modern_Booking_Manager {
    
    private $current_user;
    
    public function __construct() {
        add_action('init', array($this, 'init'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_management_assets'));
        
        // AJAX endpoints
        add_action('wp_ajax_rb_get_bookings_list', array($this, 'get_bookings_list'));
        add_action('wp_ajax_rb_get_calendar_data', array($this, 'get_calendar_data'));
        add_action('wp_ajax_rb_update_booking_status', array($this, 'update_booking_status'));
        add_action('wp_ajax_rb_delete_booking', array($this, 'delete_booking'));
        add_action('wp_ajax_rb_bulk_update_bookings', array($this, 'bulk_update_bookings'));
        add_action('wp_ajax_rb_send_bulk_reminders', array($this, 'send_bulk_reminders'));
        add_action('wp_ajax_rb_export_bookings', array($this, 'export_bookings'));
    }
    
    public function init() {
        // Check if user is accessing booking management
        if (isset($_GET['rb_portal']) && $_GET['rb_portal'] === 'bookings') {
            $this->render_booking_management();
            exit;
        }
    }
    
    public function enqueue_management_assets() {
        if (!$this->is_management_page()) {
            return;
        }
        
        // Management styles
        wp_enqueue_style('rb-booking-management',
            plugin_dir_url(__FILE__) . '../assets/css/booking-management.css',
            array('rb-design-system'), // Dependency on Phase 1
            '1.0.0'
        );
        
        // Management scripts
        wp_enqueue_script('rb-booking-management',
            plugin_dir_url(__FILE__) . '../assets/js/booking-management.js',
            array('jquery'),
            '1.0.0',
            true
        );
        
        // Localize script data
        wp_localize_script('rb-booking-management', 'rbBookingManagement', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('rb_booking_management_nonce'),
            'current_location' => $this->get_current_location(),
            'strings' => array(
                'loading' => __('Loading bookings...', 'restaurant-booking'),
                'error' => __('Error loading data', 'restaurant-booking'),
                'confirm_delete' => __('Are you sure you want to delete this booking?', 'restaurant-booking'),
                'confirm_bulk_cancel' => __('Are you sure you want to cancel selected bookings?', 'restaurant-booking'),
                'no_bookings_selected' => __('No bookings selected', 'restaurant-booking'),
                'success_updated' => __('Booking updated successfully', 'restaurant-booking'),
                'success_deleted' => __('Booking deleted successfully', 'restaurant-booking'),
                'reminders_sent' => __('Reminder emails sent successfully', 'restaurant-booking')
            )
        ));
    }
    
    public function render_booking_management() {
        // Check authentication
        $session_manager = new RB_Portal_Session_Manager();
        if (!$session_manager->is_logged_in()) {
            wp_redirect(home_url('/portal'));
            exit;
        }
        
        $this->current_user = $session_manager->get_current_user();
        
        // Enqueue assets
        $this->enqueue_management_assets();
        
        // Set page title
        add_filter('pre_get_document_title', function() {
            return 'Booking Management - Restaurant Manager';
        });
        
        // Load template
        include plugin_dir_path(__FILE__) . 'partials/booking-management.php';
    }
    
    public function get_bookings_list() {
        check_ajax_referer('rb_booking_management_nonce', 'nonce');
        
        $page = intval($_POST['page']);
        $page_size = intval($_POST['page_size']);
        $sort_by = sanitize_text_field($_POST['sort_by']);
        $sort_order = sanitize_text_field($_POST['sort_order']);
        
        // Filters
        $filters = array(
            'date_from' => sanitize_text_field($_POST['dateFrom']),
            'date_to' => sanitize_text_field($_POST['dateTo']),
            'status' => sanitize_text_field($_POST['status']),
            'location' => intval($_POST['location']),
            'search' => sanitize_text_field($_POST['search'])
        );
        
        try {
            $bookings_data = RB_Booking::get_bookings_with_filters($filters, $page, $page_size, $sort_by, $sort_order);
            
            $formatted_bookings = array_map(array($this, 'format_booking_data'), $bookings_data['bookings']);
            
            $response_data = array(
                'bookings' => $formatted_bookings,
                'pagination' => array(
                    'current_page' => $page,
                    'total_pages' => $bookings_data['total_pages'],
                    'total_items' => $bookings_data['total_items'],
                    'start' => ($page - 1) * $page_size + 1,
                    'end' => min($page * $page_size, $bookings_data['total_items'])
                )
            );
            
            wp_send_json_success($response_data);
            
        } catch (Exception $e) {
            wp_send_json_error(array(
                'message' => __('Failed to load bookings', 'restaurant-booking')
            ));
        }
    }
    
    public function get_calendar_data() {
        check_ajax_referer('rb_booking_management_nonce', 'nonce');
        
        $month = intval($_POST['month']);
        $year = intval($_POST['year']);
        $view = sanitize_text_field($_POST['view']);
        
        // Filters
        $filters = array(
            'status' => sanitize_text_field($_POST['status']),
            'location' => intval($_POST['location']),
            'search' => sanitize_text_field($_POST['search'])
        );
        
        try {
            $calendar_data = RB_Booking::get_calendar_data($month, $year, $view, $filters);
            
            wp_send_json_successRetry
