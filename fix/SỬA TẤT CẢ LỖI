PROMPT TOÀN DIỆN CHO CODEX GPT - SỬA TẤT CẢ LỖI
markdown# TASK: Fix All Critical, Medium & Minor Issues in Modern Restaurant Booking Plugin

You are tasked with fixing all identified issues in the Modern Restaurant Booking WordPress plugin. This is a comprehensive fix that addresses 10 issues across 3 severity levels.

## 📋 CONTEXT

The plugin is a modern WordPress restaurant booking system with:
- Multi-location support
- Dark/light theme toggle
- Analytics dashboard
- Customer portal
- Table management
- Booking widget

**Current State:** Plugin has structural issues preventing proper initialization and functionality.

**Goal:** Create a fully functional, error-free plugin ready for production.

---

## 🔴 CRITICAL ISSUES (Priority 1 - Fix Immediately)

### Issue #1: Create Missing Analytics Service

**File to Create:** `includes/services/class-rb-analytics.php`

**Requirements:**
1. Implement singleton pattern
2. Provide `get_dashboard_analytics($location_id, $date)` method
3. Return properly structured data for dashboard consumption
4. Include error handling

**Expected Output Structure:**
```php
<?php
/**
 * Restaurant Booking Analytics Service
 * 
 * Provides analytics data for dashboard and reports.
 * 
 * @package RestaurantBooking
 * @since 2.0.0
 */

if (!defined('ABSPATH')) {
    exit;
}

if (!class_exists('RB_Analytics')) {

    class RB_Analytics {
        
        /**
         * Singleton instance
         */
        private static $instance = null;
        
        /**
         * Get singleton instance
         */
        public static function get_instance() {
            if (null === self::$instance) {
                self::$instance = new self();
            }
            return self::$instance;
        }
        
        /**
         * Private constructor to prevent direct instantiation
         */
        private function __construct() {
            // Initialization code
        }
        
        /**
         * Get dashboard analytics data
         * 
         * @param int $location_id Location ID
         * @param string $date Date in Y-m-d format
         * @return array Analytics data structure
         */
        public function get_dashboard_analytics($location_id, $date) {
            global $wpdb;
            
            try {
                // Validate inputs
                $location_id = absint($location_id);
                $date = sanitize_text_field($date);
                
                // Get today's stats
                $stats = $this->get_daily_stats($location_id, $date);
                
                // Get trends data
                $trends = $this->get_trends_data($location_id, $date);
                
                // Get schedule for today
                $schedule = $this->get_today_schedule($location_id, $date);
                
                // Get alerts/notifications
                $alerts = $this->get_alerts($location_id, $date);
                
                return array(
                    'stats' => $stats,
                    'trends' => $trends,
                    'schedule' => $schedule,
                    'alerts' => $alerts
                );
                
            } catch (Exception $e) {
                error_log('RB_Analytics Error: ' . $e->getMessage());
                return $this->get_empty_analytics();
            }
        }
        
        /**
         * Get daily statistics
         */
        private function get_daily_stats($location_id, $date) {
            global $wpdb;
            
            $table_name = $wpdb->prefix . 'rb_bookings';
            
            // Total bookings today
            $total_bookings = $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(*) FROM {$table_name} 
                WHERE location_id = %d 
                AND DATE(booking_date) = %s",
                $location_id,
                $date
            ));
            
            // Confirmed bookings
            $confirmed = $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(*) FROM {$table_name} 
                WHERE location_id = %d 
                AND DATE(booking_date) = %s
                AND status = 'confirmed'",
                $location_id,
                $date
            ));
            
            // Pending bookings
            $pending = $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(*) FROM {$table_name} 
                WHERE location_id = %d 
                AND DATE(booking_date) = %s
                AND status = 'pending'",
                $location_id,
                $date
            ));
            
            // Total guests
            $total_guests = $wpdb->get_var($wpdb->prepare(
                "SELECT SUM(party_size) FROM {$table_name} 
                WHERE location_id = %d 
                AND DATE(booking_date) = %s
                AND status IN ('confirmed', 'pending')",
                $location_id,
                $date
            ));
            
            // Table utilization (example calculation)
            $total_tables = $this->get_total_tables($location_id);
            $occupied_tables = $this->get_occupied_tables($location_id, $date);
            $table_utilization = $total_tables > 0 ? 
                round(($occupied_tables / $total_tables) * 100) : 0;
            
            return array(
                'total_bookings' => intval($total_bookings),
                'confirmed' => intval($confirmed),
                'pending' => intval($pending),
                'total_guests' => intval($total_guests),
                'table_utilization' => intval($table_utilization)
            );
        }
        
        /**
         * Get trends data for charts
         */
        private function get_trends_data($location_id, $date) {
            global $wpdb;
            
            $table_name = $wpdb->prefix . 'rb_bookings';
            
            // Get last 7 days data
            $results = $wpdb->get_results($wpdb->prepare(
                "SELECT DATE(booking_date) as date, COUNT(*) as count
                FROM {$table_name}
                WHERE location_id = %d
                AND booking_date >= DATE_SUB(%s, INTERVAL 7 DAY)
                AND booking_date <= %s
                GROUP BY DATE(booking_date)
                ORDER BY booking_date ASC",
                $location_id,
                $date,
                $date
            ), ARRAY_A);
            
            $labels = array();
            $data = array();
            
            foreach ($results as $row) {
                $labels[] = date('M j', strtotime($row['date']));
                $data[] = intval($row['count']);
            }
            
            return array(
                'labels' => $labels,
                'data' => $data
            );
        }
        
        /**
         * Get today's booking schedule
         */
        private function get_today_schedule($location_id, $date) {
            global $wpdb;
            
            $table_name = $wpdb->prefix . 'rb_bookings';
            
            $bookings = $wpdb->get_results($wpdb->prepare(
                "SELECT * FROM {$table_name}
                WHERE location_id = %d
                AND DATE(booking_date) = %s
                ORDER BY booking_time ASC
                LIMIT 10",
                $location_id,
                $date
            ), ARRAY_A);
            
            return $bookings;
        }
        
        /**
         * Get alerts and notifications
         */
        private function get_alerts($location_id, $date) {
            global $wpdb;
            
            $alerts = array();
            
            // Check for overbookings
            $table_name = $wpdb->prefix . 'rb_bookings';
            
            $time_slots = $wpdb->get_results($wpdb->prepare(
                "SELECT booking_time, COUNT(*) as count
                FROM {$table_name}
                WHERE location_id = %d
                AND DATE(booking_date) = %s
                AND status = 'confirmed'
                GROUP BY booking_time
                HAVING count > 5",
                $location_id,
                $date
            ), ARRAY_A);
            
            foreach ($time_slots as $slot) {
                $alerts[] = array(
                    'type' => 'warning',
                    'message' => sprintf(
                        __('High booking volume at %s (%d bookings)', 'restaurant-booking'),
                        $slot['booking_time'],
                        $slot['count']
                    )
                );
            }
            
            return $alerts;
        }
        
        /**
         * Get total tables for a location
         */
        private function get_total_tables($location_id) {
            global $wpdb;
            
            $table_name = $wpdb->prefix . 'rb_tables';
            
            return $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(*) FROM {$table_name} WHERE location_id = %d",
                $location_id
            ));
        }
        
        /**
         * Get occupied tables count
         */
        private function get_occupied_tables($location_id, $date) {
            global $wpdb;
            
            $bookings_table = $wpdb->prefix . 'rb_bookings';
            
            return $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(DISTINCT table_id) FROM {$bookings_table}
                WHERE location_id = %d
                AND DATE(booking_date) = %s
                AND status = 'confirmed'",
                $location_id,
                $date
            ));
        }
        
        /**
         * Return empty analytics structure on error
         */
        private function get_empty_analytics() {
            return array(
                'stats' => array(
                    'total_bookings' => 0,
                    'confirmed' => 0,
                    'pending' => 0,
                    'total_guests' => 0,
                    'table_utilization' => 0
                ),
                'trends' => array(
                    'labels' => array(),
                    'data' => array()
                ),
                'schedule' => array(),
                'alerts' => array()
            );
        }
    }
}
```

---

### Issue #2: Create Missing Admin CSS

**File to Create:** `assets/css/modern-admin.css`

**Requirements:**
1. Apply modern design system to WordPress admin
2. Style admin menu pages
3. Support dark/light themes
4. Maintain WordPress admin conventions

**Complete Implementation:**
```css
/**
 * Modern Restaurant Booking - WordPress Admin Styles
 * 
 * Applies modern design system to WordPress admin pages
 * while respecting WordPress conventions.
 * 
 * @package RestaurantBooking
 * @since 2.0.0
 */

/* ==================== ADMIN WRAPPER ==================== */

.rb-admin-wrapper {
  max-width: 1400px;
  margin: 20px 0;
  background: var(--rb-bg-primary, #ffffff);
  border-radius: var(--rb-radius-lg, 12px);
  box-shadow: var(--rb-shadow-sm, 0 1px 3px rgba(0,0,0,0.1));
  overflow: hidden;
}

[data-theme="dark"] .rb-admin-wrapper {
  background: var(--rb-bg-primary, #1f2937);
}

/* ==================== ADMIN HEADER ==================== */

.rb-admin-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--rb-spacing-6, 24px);
  background: var(--rb-bg-primary, #ffffff);
  border-bottom: 1px solid var(--rb-border, #e5e7eb);
}

[data-theme="dark"] .rb-admin-header {
  background: var(--rb-bg-primary, #1f2937);
  border-bottom-color: var(--rb-border, #374151);
}

.rb-admin-header h1 {
  margin: 0;
  font-size: var(--rb-text-2xl, 24px);
  font-weight: 700;
  color: var(--rb-text-primary, #111827);
}

[data-theme="dark"] .rb-admin-header h1 {
  color: var(--rb-text-primary, #f9fafb);
}

.rb-admin-header-actions {
  display: flex;
  gap: var(--rb-spacing-3, 12px);
}

/* ==================== ADMIN TABS ==================== */

.rb-admin-tabs {
  display: flex;
  gap: 0;
  background: var(--rb-bg-secondary, #f9fafb);
  border-bottom: 1px solid var(--rb-border, #e5e7eb);
  padding: 0 var(--rb-spacing-6, 24px);
}

[data-theme="dark"] .rb-admin-tabs {
  background: var(--rb-bg-secondary, #111827);
  border-bottom-color: var(--rb-border, #374151);
}

.rb-admin-tab {
  padding: var(--rb-spacing-4, 16px) var(--rb-spacing-6, 24px);
  background: transparent;
  border: none;
  color: var(--rb-text-secondary, #6b7280);
  font-size: var(--rb-text-base, 16px);
  font-weight: 500;
  cursor: pointer;
  transition: all 150ms ease;
  position: relative;
  border-bottom: 2px solid transparent;
}

.rb-admin-tab:hover {
  color: var(--rb-text-primary, #111827);
  background: var(--rb-bg-hover, rgba(0,0,0,0.05));
}

[data-theme="dark"] .rb-admin-tab:hover {
  color: var(--rb-text-primary, #f9fafb);
  background: var(--rb-bg-hover, rgba(255,255,255,0.05));
}

.rb-admin-tab.active {
  color: var(--rb-primary-600, #2563eb);
  border-bottom-color: var(--rb-primary-600, #2563eb);
}

/* ==================== ADMIN CONTENT ==================== */

.rb-admin-content {
  padding: var(--rb-spacing-6, 24px);
}

.rb-admin-section {
  margin-bottom: var(--rb-spacing-8, 32px);
}

.rb-admin-section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: var(--rb-spacing-4, 16px);
}

.rb-admin-section-title {
  font-size: var(--rb-text-xl, 20px);
  font-weight: 600;
  color: var(--rb-text-primary, #111827);
  margin: 0;
}

[data-theme="dark"] .rb-admin-section-title {
  color: var(--rb-text-primary, #f9fafb);
}

.rb-admin-section-description {
  color: var(--rb-text-secondary, #6b7280);
  font-size: var(--rb-text-sm, 14px);
  margin-top: var(--rb-spacing-2, 8px);
}

/* ==================== STATS GRID ==================== */

.rb-admin-stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: var(--rb-spacing-4, 16px);
  margin-bottom: var(--rb-spacing-6, 24px);
}

.rb-admin-stat-card {
  background: var(--rb-bg-primary, #ffffff);
  border: 1px solid var(--rb-border, #e5e7eb);
  border-radius: var(--rb-radius-lg, 12px);
  padding: var(--rb-spacing-5, 20px);
  transition: all 150ms ease;
}

[data-theme="dark"] .rb-admin-stat-card {
  background: var(--rb-bg-secondary, #111827);
  border-color: var(--rb-border, #374151);
}

.rb-admin-stat-card:hover {
  box-shadow: var(--rb-shadow-md, 0 4px 6px rgba(0,0,0,0.1));
  transform: translateY(-2px);
}

.rb-admin-stat-label {
  font-size: var(--rb-text-sm, 14px);
  color: var(--rb-text-secondary, #6b7280);
  font-weight: 500;
  margin-bottom: var(--rb-spacing-2, 8px);
  display: block;
}

.rb-admin-stat-value {
  font-size: var(--rb-text-3xl, 30px);
  font-weight: 700;
  color: var(--rb-text-primary, #111827);
  display: block;
}

[data-theme="dark"] .rb-admin-stat-value {
  color: var(--rb-text-primary, #f9fafb);
}

.rb-admin-stat-change {
  font-size: var(--rb-text-sm, 14px);
  font-weight: 500;
  margin-top: var(--rb-spacing-2, 8px);
  display: inline-block;
}

.rb-admin-stat-change.positive {
  color: var(--rb-success, #10b981);
}

.rb-admin-stat-change.negative {
  color: var(--rb-error, #ef4444);
}

/* ==================== DATA TABLE ==================== */

.rb-admin-table {
  width: 100%;
  border-collapse: collapse;
  background: var(--rb-bg-primary, #ffffff);
  border-radius: var(--rb-radius-lg, 12px);
  overflow: hidden;
}

[data-theme="dark"] .rb-admin-table {
  background: var(--rb-bg-secondary, #111827);
}

.rb-admin-table thead {
  background: var(--rb-bg-secondary, #f9fafb);
}

[data-theme="dark"] .rb-admin-table thead {
  background: var(--rb-bg-tertiary, #0f172a);
}

.rb-admin-table th {
  padding: var(--rb-spacing-4, 16px);
  text-align: left;
  font-size: var(--rb-text-sm, 14px);
  font-weight: 600;
  color: var(--rb-text-primary, #111827);
  border-bottom: 1px solid var(--rb-border, #e5e7eb);
}

[data-theme="dark"] .rb-admin-table th {
  color: var(--rb-text-primary, #f9fafb);
  border-bottom-color: var(--rb-border, #374151);
}

.rb-admin-table td {
  padding: var(--rb-spacing-4, 16px);
  font-size: var(--rb-text-base, 16px);
  color: var(--rb-text-primary, #111827);
  border-bottom: 1px solid var(--rb-border, #e5e7eb);
}

[data-theme="dark"] .rb-admin-table td {
  color: var(--rb-text-primary, #f9fafb);
  border-bottom-color: var(--rb-border, #374151);
}

.rb-admin-table tbody tr:hover {
  background: var(--rb-bg-hover, rgba(0,0,0,0.02));
}

[data-theme="dark"] .rb-admin-table tbody tr:hover {
  background: var(--rb-bg-hover, rgba(255,255,255,0.05));
}

/* ==================== FORM ELEMENTS ==================== */

.rb-admin-form-group {
  margin-bottom: var(--rb-spacing-5, 20px);
}

.rb-admin-form-label {
  display: block;
  font-size: var(--rb-text-sm, 14px);
  font-weight: 500;
  color: var(--rb-text-primary, #111827);
  margin-bottom: var(--rb-spacing-2, 8px);
}

[data-theme="dark"] .rb-admin-form-label {
  color: var(--rb-text-primary, #f9fafb);
}

.rb-admin-form-input,
.rb-admin-form-select,
.rb-admin-form-textarea {
  width: 100%;
  padding: var(--rb-spacing-3, 12px);
  font-size: var(--rb-text-base, 16px);
  border: 1px solid var(--rb-border, #e5e7eb);
  border-radius: var(--rb-radius-md, 8px);
  background: var(--rb-bg-primary, #ffffff);
  color: var(--rb-text-primary, #111827);
  transition: all 150ms ease;
}

[data-theme="dark"] .rb-admin-form-input,
[data-theme="dark"] .rb-admin-form-select,
[data-theme="dark"] .rb-admin-form-textarea {
  background: var(--rb-bg-secondary, #111827);
  border-color: var(--rb-border, #374151);
  color: var(--rb-text-primary, #f9fafb);
}

.rb-admin-form-input:focus,
.rb-admin-form-select:focus,
.rb-admin-form-textarea:focus {
  outline: none;
  border-color: var(--rb-primary-500, #3b82f6);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* ==================== BUTTONS ==================== */

.rb-admin-btn {
  padding: var(--rb-spacing-3, 12px) var(--rb-spacing-5, 20px);
  font-size: var(--rb-text-base, 16px);
  font-weight: 500;
  border-radius: var(--rb-radius-md, 8px);
  border: none;
  cursor: pointer;
  transition: all 150ms ease;
  display: inline-flex;
  align-items: center;
  gap: var(--rb-spacing-2, 8px);
}

.rb-admin-btn-primary {
  background: var(--rb-primary-600, #2563eb);
  color: #ffffff;
}

.rb-admin-btn-primary:hover {
  background: var(--rb-primary-700, #1d4ed8);
}

.rb-admin-btn-secondary {
  background: var(--rb-bg-secondary, #f9fafb);
  color: var(--rb-text-primary, #111827);
  border: 1px solid var(--rb-border, #e5e7eb);
}

[data-theme="dark"] .rb-admin-btn-secondary {
  background: var(--rb-bg-secondary, #111827);
  color: var(--rb-text-primary, #f9fafb);
  border-color: var(--rb-border, #374151);
}

.rb-admin-btn-secondary:hover {
  background: var(--rb-bg-hover, #f3f4f6);
}

[data-theme="dark"] .rb-admin-btn-secondary:hover {
  background: var(--rb-bg-hover, #1f2937);
}

/* ==================== RESPONSIVE ==================== */

@media (max-width: 768px) {
  .rb-admin-header {
    flex-direction: column;
    gap: var(--rb-spacing-4, 16px);
  }
  
  .rb-admin-tabs {
    overflow-x: auto;
  }
  
  .rb-admin-stats-grid {
    grid-template-columns: 1fr;
  }
  
  .rb-admin-table {
    font-size: var(--rb-text-sm, 14px);
  }
}
```

---

### Issue #3: Create Missing Admin JavaScript

**File to Create:** `assets/js/modern-admin.js`

**Requirements:**
1. Initialize admin functionality
2. Handle theme toggle
3. Provide AJAX helpers
4. Add admin-specific interactions

**Complete Implementation:**
```javascript
/**
 * Modern Restaurant Booking - Admin JavaScript
 * 
 * Handles admin panel functionality, AJAX operations,
 * and UI interactions.
 * 
 * @package RestaurantBooking
 * @since 2.0.0
 */

(function($) {
    'use strict';

    /**
     * Main Admin Class
     */
    class RBModernAdmin {
        constructor() {
            this.init();
        }

        init() {
            this.setupTabSwitching();
            this.setupFormHandling();
            this.setupAjaxActions();
            this.setupDataTables();
            this.setupNotifications();
            
            console.log('RB Modern Admin initialized');
        }

        /**
         * Setup tab switching functionality
         */
        setupTabSwitching() {
            $('.rb-admin-tab').on('click', function(e) {
                e.preventDefault();
                
                const $tab = $(this);
                const targetPanel = $tab.data('panel');
                
                // Update active tab
                $('.rb-admin-tab').removeClass('active');
                $tab.addClass('active');
                
                // Update visible panel
                $('.rb-admin-panel').hide();
                $('#' + targetPanel).fadeIn(200);
            });
        }

        /**
         * Setup form handling
         */
        setupFormHandling() {
            // Auto-save forms
            $('.rb-admin-form').on('submit', function(e) {
                e.preventDefault();
                
                const $form = $(this);
                const $submitBtn = $form.find('[type="submit"]');
                const formData = new FormData($form[0]);
                
                // Add WordPress nonce
                formData.append('action', 'rb_admin_save_settings');
                formData.append('nonce', rbAdmin.nonce);
                
                // Disable submit button
                $submitBtn.prop('disabled', true).text('Saving...');
                
                $.ajax({
                    url: rbAdmin.ajax_url,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            rbAdminInstance.showNotification('Settings saved successfully', 'success');
                        } else {
                            rbAdminInstance.showNotification(response.data.message || 'Error saving settings', 'error');
                        }
                    },
                    error: function() {
                        rbAdminInstance.showNotification('Connection error. Please try again.', 'error');
                    },
                    complete: function() {
                        $submitBtn.prop('disabled', false).text('Save Changes');
                    }
                });
            });
        }

        /**
         * Setup AJAX actions
         */
        setupAjaxActions() {
            // Delete actions
            $(document).on('click', '.rb-delete-action', function(e) {
                e.preventDefault();
                
                if (!confirm('Are you sure you want to delete this item?')) {
                    return;
                }
                
                const $btn = $(this);
                const itemId = $btn.data('id');
                const itemType = $btn.data('type');
                
                $.ajax({
                    url: rbAdmin.ajax_url,
                    type: 'POST',
                    data: {
                        action: 'rb_admin_delete_item',
                        nonce: rbAdmin.nonce,
                        item_id: itemId,
                        item_type: itemType
                    },
                    success: function(response) {
                        if (response.success) {
                            $btn.closest('tr').fadeOut(300, function() {
                                $(this).remove();
                            });
                            rbAdminInstance.showNotification('Item deleted successfully', 'success');
                        } else {
                            rbAdminInstance.showNotification(response.data.message || 'Error deleting item', 'error');
                        }
                    },
                    error: function() {
                        rbAdminInstance.showNotification('Connection error. Please try again.', 'error');
                    }
                });
            });

            // Bulk actions
            $('#rb-bulk-action-apply').on('click', function(e) {
                e.preventDefault();
                
                const action = $('#rb-bulk-action-select').val();
                const selectedItems = [];
                
                $('.rb-bulk-select:checked').each(function() {
                    selectedItems.push($(this).val());
                });
                
                if (selectedItems.length === 0) {
                    rbAdminInstance.showNotification('Please select at least one item', 'warning');
                    return;
                }
                
                if (!confirm(`Are you sure you want to ${action} ${selectedItems.length} item(s)?`)) {
                    return;
                }
                
                $.ajax({
                    url: rbAdmin.ajax_url,
                    type: 'POST',
                    data: {
                        action: 'rb_admin_bulk_action',
                        nonce: rbAdmin.nonce,
                        bulk_action: action,
                        items: selectedItems
                    },
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            rbAdminInstance.showNotification(response.data.message || 'Error performing bulk action', 'error');
                        }
                    },
                    error: function() {
                        rbAdminInstance.showNotification('Connection error. Please try again.', 'error');
                    }
                });
            });
        }

        /**
         * Setup data tables
         */
        setupDataTables() {
            // Select all checkbox
            $('#rb-select-all').on('change', function() {
                $('.rb-bulk-select').prop('checked', $(this).prop('checked'));
            });

            // Row click to select
            $('.rb-admin-table tbody tr').on('click', function(e) {
                if (!$(e.target).is('input, button, a')) {
                    const $checkbox = $(this).find('.rb-bulk-select');
                    $checkbox.prop('checked', !$checkbox.prop('checked'));
                }
            });

            // Sortable columns
            $('.rb-sortable').on('click', function(e) {
                e.preventDefault();
                
                const column = $(this).data('column');
                const currentOrder = $(this).data('order') || 'asc';
                const newOrder = currentOrder === 'asc' ? 'desc' : 'asc';
                
                // Update URL and reload
                const url = new URL(window.location);
                url.searchParams.set('orderby', column);
                url.searchParams.set('order', newOrder);
                window.location.href = url.toString();
            });
        }

        /**
         * Show notification
         */
        showNotification(message, type = 'info') {
            const $notification = $('<div>')
                .addClass('rb-admin-notification')
                .addClass('rb-notification-' + type)
                .text(message);
            
            $('body').append($notification);
            
            setTimeout(() => {
                $notification.addClass('show');
            }, 10);
            
            setTimeout(() => {
                $notification.removeClass('show');
                setTimeout(() => {
                    $notification.remove();
                },RetryVContinue300);
}, 3000);
}
    /**
     * Setup notifications system
     */
    setupNotifications() {
        // Add notification styles if not exist
        if (!$('#rb-notification-styles').length) {
            $('<style id="rb-notification-styles">')
                .text(`
                    .rb-admin-notification {
                        position: fixed;
                        top: 32px;
                        right: 20px;
                        padding: 16px 24px;
                        border-radius: 8px;
                        font-size: 14px;
                        font-weight: 500;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                        z-index: 999999;
                        opacity: 0;
                        transform: translateX(400px);
                        transition: all 300ms ease;
                    }
                    .rb-admin-notification.show {
                        opacity: 1;
                        transform: translateX(0);
                    }
                    .rb-notification-success {
                        background: #10b981;
                        color: white;
                    }
                    .rb-notification-error {
                        background: #ef4444;
                        color: white;
                    }
                    .rb-notification-warning {
                        background: #f59e0b;
                        color: white;
                    }
                    .rb-notification-info {
                        background: #3b82f6;
                        color: white;
                    }
                `)
                .appendTo('head');
        }
    }

    /**
     * AJAX Helper Methods
     */
    ajaxRequest(action, data = {}) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: rbAdmin.ajax_url,
                type: 'POST',
                data: {
                    action: action,
                    nonce: rbAdmin.nonce,
                    ...data
                },
                success: function(response) {
                    if (response.success) {
                        resolve(response.data);
                    } else {
                        reject(response.data);
                    }
                },
                error: function(xhr, status, error) {
                    reject({ message: 'Connection error: ' + error });
                }
            });
        });
    }
}

// Initialize when DOM is ready
$(document).ready(function() {
    window.rbAdminInstance = new RBModernAdmin();
});
})(jQuery);

---

### Issue #4: Create Missing Animations CSS

**File to Create:** `assets/css/animations.css`

**Requirements:**
1. Define all @keyframes animations
2. Include transition tokens
3. Support prefers-reduced-motion
4. Provide utility classes

**Complete Implementation:**
```css
/**
 * Modern Restaurant Booking - Animation System
 * 
 * Centralized animation definitions, keyframes, and transitions.
 * 
 * @package RestaurantBooking
 * @since 2.0.0
 */

/* ==================== TRANSITION TOKENS ==================== */

:root {
  --rb-transition-fast: 150ms ease-in-out;
  --rb-transition-base: 250ms ease-in-out;
  --rb-transition-slow: 350ms ease-in-out;
  
  /* Easing functions */
  --rb-ease-in: cubic-bezier(0.4, 0, 1, 1);
  --rb-ease-out: cubic-bezier(0, 0, 0.2, 1);
  --rb-ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  --rb-ease-spring: cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

/* ==================== KEYFRAME ANIMATIONS ==================== */

/* Fade animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

/* Slide animations */
@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Scale animations */
@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes scaleOut {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0.9);
  }
}

/* Bounce animation */
@keyframes bounce {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
}

/* Pulse animation */
@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

/* Spin animation */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes spinReverse {
  from {
    transform: rotate(360deg);
  }
  to {
    transform: rotate(0deg);
  }
}

/* Shake animation */
@keyframes shake {
  0%, 100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-10px);
  }
  75% {
    transform: translateX(10px);
  }
}

/* Wiggle animation */
@keyframes wiggle {
  0%, 100% {
    transform: rotate(0deg);
  }
  25% {
    transform: rotate(-5deg);
  }
  75% {
    transform: rotate(5deg);
  }
}

/* Ping animation */
@keyframes ping {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

/* Skeleton loading */
@keyframes skeletonLoading {
  0% {
    background-position: -1200px 0;
  }
  100% {
    background-position: 1200px 0;
  }
}

/* Ripple effect */
@keyframes ripple {
  0% {
    transform: scale(0);
    opacity: 1;
  }
  100% {
    transform: scale(4);
    opacity: 0;
  }
}

/* Progress bar */
@keyframes progress {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(100%);
  }
}

/* Glow effect */
@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
  }
  50% {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.8);
  }
}

/* ==================== UTILITY CLASSES ==================== */

/* Fade utilities */
.rb-animate-fade-in {
  animation: fadeIn var(--rb-transition-base) var(--rb-ease-out);
}

.rb-animate-fade-out {
  animation: fadeOut var(--rb-transition-base) var(--rb-ease-in);
}

/* Slide utilities */
.rb-animate-slide-up {
  animation: slideInUp var(--rb-transition-base) var(--rb-ease-out);
}

.rb-animate-slide-down {
  animation: slideInDown var(--rb-transition-base) var(--rb-ease-out);
}

.rb-animate-slide-left {
  animation: slideInLeft var(--rb-transition-base) var(--rb-ease-out);
}

.rb-animate-slide-right {
  animation: slideInRight var(--rb-transition-base) var(--rb-ease-out);
}

/* Scale utilities */
.rb-animate-scale-in {
  animation: scaleIn var(--rb-transition-base) var(--rb-ease-out);
}

.rb-animate-scale-out {
  animation: scaleOut var(--rb-transition-base) var(--rb-ease-in);
}

/* Special effects */
.rb-animate-bounce {
  animation: bounce 1s ease-in-out infinite;
}

.rb-animate-pulse {
  animation: pulse 2s ease-in-out infinite;
}

.rb-animate-shake {
  animation: shake 0.5s ease-in-out;
}

.rb-animate-wiggle {
  animation: wiggle 0.5s ease-in-out;
}

.rb-animate-ping {
  animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
}

/* Loading states */
.rb-animate-spin {
  animation: spin 1s linear infinite;
}

.rb-animate-spin-reverse {
  animation: spinReverse 1s linear infinite;
}

/* Skeleton loading */
.rb-animate-skeleton {
  background: linear-gradient(
    90deg,
    var(--rb-bg-secondary, #f3f4f6) 0%,
    var(--rb-border, #e5e7eb) 50%,
    var(--rb-bg-secondary, #f3f4f6) 100%
  );
  background-size: 1200px 100%;
  animation: skeletonLoading 2s ease-in-out infinite;
}

[data-theme="dark"] .rb-animate-skeleton {
  background: linear-gradient(
    90deg,
    var(--rb-bg-secondary, #1f2937) 0%,
    var(--rb-border, #374151) 50%,
    var(--rb-bg-secondary, #1f2937) 100%
  );
}

/* Ripple effect */
.rb-animate-ripple {
  animation: ripple 0.6s ease-out;
}

/* Glow effect */
.rb-animate-glow {
  animation: glow 2s ease-in-out infinite;
}

/* ==================== TRANSITION UTILITIES ==================== */

.rb-transition-fast {
  transition: all var(--rb-transition-fast);
}

.rb-transition-base {
  transition: all var(--rb-transition-base);
}

.rb-transition-slow {
  transition: all var(--rb-transition-slow);
}

.rb-transition-colors {
  transition: color var(--rb-transition-base),
              background-color var(--rb-transition-base),
              border-color var(--rb-transition-base);
}

.rb-transition-transform {
  transition: transform var(--rb-transition-base) var(--rb-ease-out);
}

.rb-transition-opacity {
  transition: opacity var(--rb-transition-base);
}

/* ==================== ANIMATION DELAYS ==================== */

.rb-delay-100 {
  animation-delay: 100ms;
}

.rb-delay-200 {
  animation-delay: 200ms;
}

.rb-delay-300 {
  animation-delay: 300ms;
}

.rb-delay-500 {
  animation-delay: 500ms;
}

.rb-delay-700 {
  animation-delay: 700ms;
}

.rb-delay-1000 {
  animation-delay: 1000ms;
}

/* ==================== ANIMATION FILL MODES ==================== */

.rb-animation-fill-both {
  animation-fill-mode: both;
}

.rb-animation-fill-forward {
  animation-fill-mode: forwards;
}

.rb-animation-fill-backwards {
  animation-fill-mode: backwards;
}

/* ==================== HOVER EFFECTS ==================== */

.rb-hover-lift {
  transition: transform var(--rb-transition-base) var(--rb-ease-out);
}

.rb-hover-lift:hover {
  transform: translateY(-4px);
}

.rb-hover-grow {
  transition: transform var(--rb-transition-base) var(--rb-ease-out);
}

.rb-hover-grow:hover {
  transform: scale(1.05);
}

.rb-hover-shrink {
  transition: transform var(--rb-transition-base) var(--rb-ease-out);
}

.rb-hover-shrink:hover {
  transform: scale(0.95);
}

.rb-hover-rotate {
  transition: transform var(--rb-transition-base) var(--rb-ease-out);
}

.rb-hover-rotate:hover {
  transform: rotate(5deg);
}

/* ==================== LOADING STATES ==================== */

.rb-loading-spinner {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-left-color: currentColor;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

[data-theme="dark"] .rb-loading-spinner {
  border-color: rgba(255, 255, 255, 0.1);
  border-left-color: currentColor;
}

.rb-loading-dots {
  display: inline-flex;
  gap: 4px;
}

.rb-loading-dots span {
  display: inline-block;
  width: 8px;
  height: 8px;
  background: currentColor;
  border-radius: 50%;
  animation: pulse 1.4s ease-in-out infinite;
}

.rb-loading-dots span:nth-child(1) {
  animation-delay: 0s;
}

.rb-loading-dots span:nth-child(2) {
  animation-delay: 0.2s;
}

.rb-loading-dots span:nth-child(3) {
  animation-delay: 0.4s;
}

.rb-loading-bar {
  position: relative;
  width: 100%;
  height: 4px;
  background: var(--rb-bg-secondary, #f3f4f6);
  border-radius: 2px;
  overflow: hidden;
}

[data-theme="dark"] .rb-loading-bar {
  background: var(--rb-bg-secondary, #1f2937);
}

.rb-loading-bar::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 50%;
  height: 100%;
  background: var(--rb-primary-600, #2563eb);
  animation: progress 1.5s ease-in-out infinite;
}

/* ==================== ACCESSIBILITY ==================== */

/* Respect user's motion preferences */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
  
  .rb-animate-skeleton {
    animation: none !important;
    background: var(--rb-bg-secondary);
  }
  
  .rb-loading-spinner,
  .rb-animate-spin {
    animation: none !important;
  }
}

/* Focus visible for keyboard navigation */
.rb-transition-focus:focus-visible {
  outline: 2px solid var(--rb-primary-500, #3b82f6);
  outline-offset: 2px;
  transition: outline-offset var(--rb-transition-fast);
}
```

---

## 🟡 MEDIUM PRIORITY ISSUES (Priority 2)

### Issue #5: Add Theme Manager to Admin Enqueue

**File to Modify:** `admin/class-modern-admin.php`

**Changes Required:**
In the `enqueue_admin_assets()` method, add theme manager script:
```php
public function enqueue_admin_assets( $hook ) {
    if ( strpos( $hook, 'rb-' ) === false ) {
        return;
    }

    $version  = defined( 'RB_PLUGIN_VERSION' ) ? RB_PLUGIN_VERSION : '1.0.0';
    $base_url = plugin_dir_url( __FILE__ ) . '../';

    wp_enqueue_style(
        'rb-design-system',
        $base_url . 'assets/css/design-system.css',
        array(),
        $version
    );

    wp_enqueue_style(
        'rb-components',
        $base_url . 'assets/css/components.css',
        array( 'rb-design-system' ),
        $version
    );

    // ADD THIS: Enqueue animations
    wp_enqueue_style(
        'rb-animations',
        $base_url . 'assets/css/animations.css',
        array( 'rb-design-system' ),
        $version
    );

    wp_enqueue_style(
        'rb-modern-admin',
        $base_url . 'assets/css/modern-admin.css',
        array( 'rb-design-system', 'rb-components', 'rb-animations' ),
        $version
    );

    // ADD THIS: Enqueue theme manager FIRST
    wp_enqueue_script(
        'rb-theme-manager',
        $base_url . 'assets/js/theme-manager.js',
        array(),
        $version,
        true
    );

    wp_enqueue_script(
        'rb-modern-admin',
        $base_url . 'assets/js/modern-admin.js',
        array( 'jquery', 'rb-theme-manager' ), // ADD rb-theme-manager dependency
        $version,
        true
    );

    wp_localize_script(
        'rb-modern-admin',
        'rbAdmin',
        array(
            'ajax_url' => admin_url( 'admin-ajax.php' ),
            'nonce'    => wp_create_nonce( 'rb_admin_nonce' ),
        )
    );
}
```

---

### Issue #6: Add Error Handling to Plugin Manager

**File to Modify:** `includes/class-plugin-manager.php`

**Changes Required:**
Wrap file loading in try-catch and add file existence checks:
```php
protected function load_dependencies() {
    $required_files = array(
        'includes/class-plugin-activator.php',
        'includes/class-plugin-deactivator.php',
        'includes/models/class-booking.php',
        'includes/models/class-location.php',
        'includes/models/class-table.php',
        'includes/models/class-customer.php',
        'includes/services/class-analytics-service.php',
        'includes/services/class-rb-analytics.php',
        'includes/services/class-calendar-service.php',
        'includes/services/class-notification-service.php',
        'includes/database/schema.php',
    );

    foreach ( $required_files as $file ) {
        $path = RESTAURANT_BOOKING_PATH . $file;
        
        if ( file_exists( $path ) ) {
            require_once $path;
        } else {
            error_log( sprintf(
                'Restaurant Booking Error: Missing required file - %s',
                $file
            ) );
            
            // Add admin notice
            add_action( 'admin_notices', function() use ( $file ) {
                printf(
                    '<div class="notice notice-error"><p>%s</p></div>',
                    sprintf(
                        __( 'Restaurant Booking: Missing file %s. Please reinstall the plugin.', 'restaurant-booking' ),
                        esc_html( basename( $file ) )
                    )
                );
            });
        }
    }

    // Load admin classes only in admin context
    if ( file_exists( RESTAURANT_BOOKING_PATH . 'admin/class-modern-admin.php' ) ) {
        require_once RESTAURANT_BOOKING_PATH . 'admin/class-modern-admin.php';
    }

    // Load public classes
    $public_files = array(
        'public/class-modern-booking-widget.php',
        'public/class-modern-portal-auth.php',
        'public/class-modern-dashboard.php',
        'public/class-modern-booking-manager.php',
        'public/class-modern-table-manager.php',
    );

    foreach ( $public_files as $file ) {
        $path = RESTAURANT_BOOKING_PATH . $file;
        if ( file_exists( $path ) ) {
            require_once $path;
        }
    }
}
```

---

### Issue #7: Add Comprehensive AJAX Error Handling

**Files to Modify:** All AJAX handler files

**Pattern to Apply:**
```php
/**
 * AJAX handler with comprehensive error handling
 */
public function ajax_get_bookings_list() {
    try {
        // 1. Verify nonce
        if ( ! check_ajax_referer( 'rb_booking_management_nonce', 'nonce', false ) ) {
            throw new Exception( __( 'Security check failed', 'restaurant-booking' ) );
        }

        // 2. Check capabilities
        if ( ! current_user_can( 'manage_bookings' ) ) {
            throw new Exception( __( 'Permission denied', 'restaurant-booking' ) );
        }

        // 3. Validate required inputs
        if ( ! isset( $_POST['location_id'] ) ) {
            throw new Exception( __( 'Missing required parameter: location_id', 'restaurant-booking' ) );
        }

        // 4. Sanitize inputs
        $location_id = absint( $_POST['location_id'] );
        $status = isset( $_POST['status'] ) ? sanitize_text_field( $_POST['status'] ) : 'all';
        $page = isset( $_POST['page'] ) ? absint( $_POST['page'] ) : 1;
        $per_page = isset( $_POST['per_page'] ) ? absint( $_POST['per_page'] ) : 20;

        // 5. Get data
        $bookings = $this->get_bookings_data( $location_id, $status, $page, $per_page );

        // 6. Return success
        wp_send_json_success( array(
            'bookings' => $bookings['items'],
            'total' => $bookings['total'],
            'pages' => $bookings['pages'],
            'current_page' => $page,
        ) );

    } catch ( Exception $e ) {
        // Log error
        error_log( 'RB AJAX Error in ajax_get_bookings_list: ' . $e->getMessage() );

        // Return error response
        wp_send_json_error( array(
            'message' => $e->getMessage(),
        ), 400 );
    }
}
```

**Apply this pattern to:**
- `public/class-modern-booking-manager.php` - All AJAX methods
- `public/class-modern-dashboard.php` - All AJAX methods
- `public/class-modern-table-manager.php` - All AJAX methods
- `admin/class-modern-admin.php` - All AJAX methods

---

## 🟢 MINOR ISSUES (Priority 3)

### Issue #8: Create Asset Loading Trait

**File to Create:** `includes/traits/trait-rb-asset-loader.php`

**Purpose:** Reduce code duplication across classes
```php
<?php
/**
 * Asset Loader Trait
 * 
 * Provides common asset loading functionality to reduce code duplication.
 * 
 * @package RestaurantBooking
 * @since 2.0.0
 */

if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

if ( ! trait_exists( 'RB_Asset_Loader' ) ) {

    trait RB_Asset_Loader {

        /**
         * Asset enqueue flag
         */
        protected $assets_enqueued = false;

        /**
         * Enqueue core design system assets
         * 
         * @param string $context Context identifier (admin, portal, widget, etc.)
         */
        protected function enqueue_core_assets( $context = 'default' ) {
            if ( $this->assets_enqueued ) {
                return;
            }

            $this->assets_enqueued = true;

            $version  = defined( 'RB_PLUGIN_VERSION' ) ? RB_PLUGIN_VERSION : '1.0.0';
            $base_url = plugin_dir_url( __FILE__ ) . '../../';

            // Core CSS
            wp_enqueue_style(
                'rb-design-system',
                $base_url . 'assets/css/design-system.css',
                array(),
                $version
            );

            wp_enqueue_style(
                'rb-components',
                $base_url . 'assets/css/components.css',
                array( 'rb-design-system' ),
                $version
            );

            wp_enqueue_style(
                'rb-animations',
                $base_url . 'assets/css/animations.css',
                array( 'rb-design-system' ),
                $version
            );

            // Theme manager (always load first)
            wp_enqueue_script(
                'rb-theme-manager',
                $base_url . 'assets/js/theme-manager.js',
                array(),
                $version,
                true
            );

            // Context-specific assets
            do_action( 'rb_after_core_assets', $context, $base_url, $version );
        }

        /**
         * Localize script data for AJAX
         * 
         * @param string $handle Script handle
         * @param string $object_name JavaScript object name
         * @param array $additional_data Additional data to merge
         */
        protected function localize_ajax_data( $handle, $object_name, $additional_data = array() ) {
            $data = array_merge(
                array(
                    'ajax_url' => admin_url( 'admin-ajax.php' ),
                    'nonce'    => wp_create_nonce( 'rb_nonce' ),
                ),
                $additional_data
            );

            wp_localize_script( $handle, $object_name, $data );
        }

        /**
         * Register Chart.js library
         */
        protected function enqueue_chartjs() {
            static $chartjs_loaded = false;

            if ( $chartjs_loaded ) {
                return;
            }

            $chartjs_loaded = true;

            wp_enqueue_script(
                'chart-js',
                'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js',
                array(),
                '3.9.1',
                true
            );
        }

        /**
         * Enqueue context-specific CSS
         * 
         * @param string $context Context name (portal-dashboard, booking-widget, etc.)
         */
        protected function enqueue_context_css( $context ) {
            $version  = defined( 'RB_PLUGIN_VERSION' ) ? RB_PLUGIN_VERSION : '1.0.0';
            $base_url = plugin_dir_url( __FILE__ ) . '../../';

            wp_enqueue_style(
                'rb-' . $context,
                $base_url . 'assets/css/' . $context . '.css',
                array( 'rb-design-system', 'rb-components', 'rb-animations' ),
                $version
            );
        }

        /**
         * Enqueue context-specific JavaScript
         * 
         * @param string $context Context name
         * @param array $dependencies Script dependencies
         */
        protected function enqueue_context_js( $context, $dependencies = array() ) {
            $version  = defined( 'RB_PLUGIN_VERSION' ) ? RB_PLUGIN_VERSION : '1.0.0';
            $base_url = plugin_dir_url( __FILE__ ) . '../../';

            // Always include theme manager as dependency
            if ( ! in_array( 'rb-theme-manager', $dependencies, true ) ) {
                $dependencies[] = 'rb-theme-manager';
            }

            wp_enqueue_script(
                'rb-' . $context,
                $base_url . 'assets/js/' . $context . '.js',
                $dependencies,
                $version,
                true
            );
        }
    }
}
```

**Then update classes to use the trait:**
```php
// Example: public/class-modern-dashboard.php

class RB_Modern_Dashboard {
    use RB_Asset_Loader; // Add this

    protected function enqueue_portal_assets() {
        // Replace all the duplicated enqueue code with:
        $this->enqueue_core_assets( 'portal' );
        $this->enqueue_chartjs();
        $this->enqueue_context_css( 'portal-dashboard' );
        $this->enqueue_context_js( 'portal-dashboard', array( 'chart-js' ) );
        $this->localize_ajax_data( 'rb-portal-dashboard', 'rbPortal', array(
            'location_id' => $this->current_user['location_id'] ?? 0,
        ) );
    }
}
```

---

### Issue #9: Add Translation Support

**Step 1: Create languages directory structure**

Create folder: `languages/`

**Step 2: Add to Plugin Manager**

In `includes/class-plugin-manager.php`, modify `define_hooks()`:
```php
protected function define_hooks() {
    // Load text domain for translations
    $this->loader->add_action( 'plugins_loaded', $this, 'load_textdomain' );
    
    // Rest of hooks...
}

/**
 * Load plugin text domain for translations
 */
public function load_textdomain() {
    load_plugin_textdomain(
        'restaurant-booking',
        false,
        dirname( RESTAURANT_BOOKING_BASENAME ) . '/languages/'
    );
}
```

**Step 3: Generate POT file**

Create `languages/restaurant-booking.pot` (template file for translators):
```bash
# If you have WP-CLI installed:
wp i18n make-pot . languages/restaurant-booking.pot --domain=restaurant-booking

# Manual command with PHP:
php /path/to/wordpress/wp-content/plugins/your-tool/makepot.php wp-plugin modern-restaurant-booking
```

---

### Issue #10: Optimize Constants Definitions

**File to Modify:** `restaurant-booking-manager.php`

**Current Issue:** Redundant constant definitions

**Optimized Version:**
```php
<?php
/**
 * Plugin Name: Modern Restaurant Booking Manager
 * Plugin URI: https://github.com/your-repo/modern-restaurant-booking
 * Description: Modern booking interface for restaurants with dark mode, advanced analyticsRetryVContinue, and multi-location support.

Version: 2.0.0
Author: Your Company
Author URI: https://yourcompany.com
License: GPL v2 or later
Text Domain: restaurant-booking
Domain Path: /languages
Requires at least: 5.0
Requires PHP: 7.2
*/

// Prevent direct access
if ( ! defined( 'ABSPATH' ) ) {
exit;
}
// Prevent multiple initialization
if ( defined( 'RESTAURANT_BOOKING_VERSION' ) ) {
return;
}
/**

Define plugin constants

Using a function to encapsulate and avoid global scope pollution
*/
function rb_define_constants() {
$constants = array(
'RESTAURANT_BOOKING_VERSION'  => '2.0.0',
'RESTAURANT_BOOKING_PATH'     => plugin_dir_path( FILE ),
'RESTAURANT_BOOKING_URL'      => plugin_dir_url( FILE ),
'RESTAURANT_BOOKING_BASENAME' => plugin_basename( FILE ),
'RESTAURANT_BOOKING_FILE'     => FILE,
);
foreach ( $constants as $name => $value ) {
if ( ! defined( $name ) ) {
define( $name, $value );
}
}
// Legacy constants for backward compatibility
$legacy_map = array(
'RB_PLUGIN_VERSION'  => 'RESTAURANT_BOOKING_VERSION',
'RB_PLUGIN_FILE'     => 'RESTAURANT_BOOKING_FILE',
'RB_PLUGIN_DIR'      => 'RESTAURANT_BOOKING_PATH',
'RB_PLUGIN_URL'      => 'RESTAURANT_BOOKING_URL',
'RB_PLUGIN_BASENAME' => 'RESTAURANT_BOOKING_BASENAME',
);
foreach ( $legacy_map as $legacy => $modern ) {
if ( ! defined( $legacy ) && defined( $modern ) ) {
define( $legacy, constant( $modern ) );
}
}
}

rb_define_constants();
/**

Check dependencies and compatibility
*/
function rb_check_requirements() {
$errors = array();
// Check PHP version
if ( version_compare( PHP_VERSION, '7.2', '<' ) ) {
$errors[] = sprintf(
__( 'Restaurant Booking requires PHP 7.2 or higher. You are running version %s.', 'restaurant-booking' ),
PHP_VERSION
);
}
// Check WordPress version
global $wp_version;
if ( version_compare( $wp_version, '5.0', '<' ) ) {
$errors[] = sprintf(
__( 'Restaurant Booking requires WordPress 5.0 or higher. You are running version %s.', 'restaurant-booking' ),
$wp_version
);
}
// Check if required files exist
$required_files = array(
'includes/class-plugin-loader.php',
'includes/class-plugin-manager.php',
);
foreach ( $required_files as $file ) {
if ( ! file_exists( RESTAURANT_BOOKING_PATH . $file ) ) {
$errors[] = sprintf(
__( 'Restaurant Booking: Missing required file %s. Please reinstall the plugin.', 'restaurant-booking' ),
$file
);
}
}
// Display errors if any
if ( ! empty( $errors ) ) {
add_action( 'admin_notices', function() use ( $errors ) {
foreach ( $errors as $error ) {
printf(
'<div class="notice notice-error"><p><strong>%s</strong> %s</p></div>',
__( 'Restaurant Booking Error:', 'restaurant-booking' ),
esc_html( $error )
);
}
});
return false;
}
return true;
}

// Early requirements check
if ( ! rb_check_requirements() ) {
return;
}
/**

Load plugin core classes
*/
require_once RESTAURANT_BOOKING_PATH . 'includes/class-plugin-loader.php';
require_once RESTAURANT_BOOKING_PATH . 'includes/class-plugin-manager.php';

/**

Initialize the plugin
*/
function restaurant_booking_init() {
// Load text domain for internationalization
load_plugin_textdomain(
'restaurant-booking',
false,
dirname( RESTAURANT_BOOKING_BASENAME ) . '/languages/'
);
// Initialize plugin manager
try {
$plugin = Restaurant_Booking_Plugin_Manager::instance();
$plugin->run();
} catch ( Exception $e ) {
error_log( 'Restaurant Booking initialization error: ' . $e->getMessage() );
 add_action( 'admin_notices', function() use ( $e ) {
     printf(
         '<div class="notice notice-error"><p><strong>%s</strong> %s</p></div>',
         __( 'Restaurant Booking Error:', 'restaurant-booking' ),
         esc_html( $e->getMessage() )
     );
 });
}
}

add_action( 'plugins_loaded', 'restaurant_booking_init', 10 );
/**

Activation hook
*/
function restaurant_booking_activate() {
require_once RESTAURANT_BOOKING_PATH . 'includes/class-plugin-activator.php';
Restaurant_Booking_Plugin_Activator::activate();
}

register_activation_hook( FILE, 'restaurant_booking_activate' );
/**

Deactivation hook
*/
function restaurant_booking_deactivate() {
require_once RESTAURANT_BOOKING_PATH . 'includes/class-plugin-deactivator.php';
Restaurant_Booking_Plugin_Deactivator::deactivate();
}

register_deactivation_hook( FILE, 'restaurant_booking_deactivate' );

---

## 📋 COMPLETE IMPLEMENTATION CHECKLIST

### ✅ Critical Files to Create
```
[ ] includes/services/class-rb-analytics.php
    - Singleton pattern
    - get_dashboard_analytics() method
    - Error handling
    - Database queries for stats

[ ] assets/css/modern-admin.css
    - Admin wrapper styles
    - Tab navigation
    - Stat cards
    - Data tables
    - Form elements
    - Dark mode support

[ ] assets/js/modern-admin.js
    - Tab switching
    - Form handling
    - AJAX operations
    - Notifications system
    - Bulk actions

[ ] assets/css/animations.css
    - @keyframes definitions
    - Transition tokens
    - Utility classes
    - Hover effects
    - Loading states
    - Reduced motion support
```

### ✅ Files to Modify
```
[ ] admin/class-modern-admin.php
    - Add theme-manager.js enqueue
    - Add animations.css enqueue
    - Update dependencies array

[ ] includes/class-plugin-manager.php
    - Add file existence checks
    - Implement error handling
    - Add error logging
    - Add admin notices for missing files

[ ] public/class-modern-booking-manager.php
    - Add try-catch to all AJAX handlers
    - Add input validation
    - Add error logging
    - Improve error messages

[ ] public/class-modern-dashboard.php
    - Add try-catch to all AJAX handlers
    - Add input validation
    - Add error logging

[ ] public/class-modern-table-manager.php
    - Add try-catch to all AJAX handlers
    - Add input validation
    - Add error logging

[ ] restaurant-booking-manager.php
    - Optimize constants definition
    - Add requirements checking
    - Add try-catch for initialization
    - Improve error handling
```

### ✅ Files to Create (Optional Improvements)
```
[ ] includes/traits/trait-rb-asset-loader.php
    - Centralized asset loading
    - Reduce code duplication
    - Consistent enqueue pattern

[ ] languages/restaurant-booking.pot
    - Translation template
    - All translatable strings

[ ] README.md updates
    - Document new error handling
    - Update installation instructions
    - Add troubleshooting section
```

---

## 🔧 IMPLEMENTATION ORDER

Execute fixes in this order for best results:

### Phase 1: Critical (Do First)
1. Create `includes/services/class-rb-analytics.php`
2. Create `assets/css/modern-admin.css`
3. Create `assets/js/modern-admin.js`
4. Create `assets/css/animations.css`
5. Test: Dashboard should load without fatal errors

### Phase 2: Medium Priority
6. Modify `admin/class-modern-admin.php` - Add theme manager
7. Modify `includes/class-plugin-manager.php` - Add error handling
8. Add AJAX error handling to all public classes
9. Test: All AJAX operations should have proper error responses

### Phase 3: Code Quality
10. Create `includes/traits/trait-rb-asset-loader.php`
11. Update classes to use the trait
12. Optimize `restaurant-booking-manager.php`
13. Test: No functionality should break

### Phase 4: Internationalization
14. Generate `languages/restaurant-booking.pot`
15. Add load_textdomain to plugin manager
16. Test: Strings are ready for translation

---

## 🧪 TESTING REQUIREMENTS

After implementing all fixes, verify:

### Critical Functionality
- [ ] Plugin activates without errors
- [ ] WordPress recognizes the plugin
- [ ] Admin menu appears correctly
- [ ] Dashboard loads with real data
- [ ] No JavaScript console errors
- [ ] No PHP fatal errors in error log

### Theme Manager
- [ ] Dark/light toggle works in admin
- [ ] Dark/light toggle works in portal
- [ ] Dark/light toggle works in booking widget
- [ ] Theme persists after page reload
- [ ] Theme syncs across tabs

### Animations
- [ ] Fade animations work
- [ ] Slide animations work
- [ ] Loading spinners work
- [ ] Hover effects work
- [ ] Reduced motion is respected

### AJAX Operations
- [ ] All AJAX calls return proper responses
- [ ] Error messages are user-friendly
- [ ] Loading states display correctly
- [ ] Success notifications appear
- [ ] Error notifications appear

### Error Handling
- [ ] Missing files show admin notice
- [ ] Invalid AJAX requests return 400
- [ ] Permission denied returns 403
- [ ] Database errors are logged
- [ ] No sensitive data in error messages

---

## 📊 SUCCESS CRITERIA

Plugin is considered fixed when:

1. ✅ **No Fatal Errors**: Plugin loads completely without PHP fatal errors
2. ✅ **No 404 Errors**: All enqueued assets load successfully
3. ✅ **Dashboard Works**: Analytics dashboard displays real data
4. ✅ **Theme Toggle Works**: Dark/light mode functions across all interfaces
5. ✅ **Animations Work**: All animations and transitions display correctly
6. ✅ **AJAX Stable**: All AJAX operations have error handling
7. ✅ **Clean Logs**: No PHP warnings or notices in error log
8. ✅ **User Experience**: Admin interface is fully functional and styled
9. ✅ **Code Quality**: No code duplication, proper error handling
10. ✅ **Documentation**: All new files have proper docblocks

---

## 🚀 DEPLOYMENT NOTES

Before deploying to production:

1. **Backup Database**: Always backup before updates
2. **Test Environment**: Test all fixes in staging first
3. **Error Logging**: Enable WordPress debug mode temporarily
4. **Browser Testing**: Test in Chrome, Firefox, Safari, Edge
5. **Mobile Testing**: Verify responsive design
6. **Performance**: Check page load times
7. **Accessibility**: Verify keyboard navigation
8. **Translations**: Test with non-English language

---

## 📝 POST-IMPLEMENTATION DOCUMENTATION

After fixes are complete, update:

1. **CHANGELOG.md**: Document all changes
2. **README.md**: Update installation instructions
3. **Developer Docs**: Document new error handling patterns
4. **User Guide**: Update screenshots if UI changed
5. **API Documentation**: Document new methods/classes

---

## 🎯 FINAL NOTES

- All code follows WordPress Coding Standards
- All strings are translatable
- All AJAX operations have nonce verification
- All user inputs are sanitized
- All database queries use prepared statements
- All errors are logged appropriately
- All critical functionality has error handling
- All assets support dark mode
- All animations respect user preferences
- All code is well-documented

**Estimated Time**: 6-8 hours for complete implementation and testing

**Priority**: Execute Phase 1 immediately to restore basic functionality

**Risk Level**: Low - All changes are additive or improve existing code
