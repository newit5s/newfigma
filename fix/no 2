🔧 PROMPT KHẮC PHỤC CÁC LỖI CRITICAL
Dưới đây là các prompt chi tiết để khắc phục 3 lỗi nghiêm trọng đã được phát hiện.

🔴 PROMPT 1: KHẮC PHỤC DATA MODELS PLACEHOLDER VALUES
📋 Context
Các data models hiện tại chỉ trả về placeholder values, khiến dashboard và managers không có dữ liệu thực. Cần implement real database queries.
🎯 Prompt
markdown# TASK: Implement Real Data Queries for Booking Models

## Context
The Modern Restaurant Booking plugin currently has data models that return placeholder/dummy values. We need to implement real WordPress database queries to fetch actual booking data.

## Files to Update

### 1. includes/models/class-booking.php

**Current Issue**: Methods return hardcoded arrays instead of querying database.

**Requirements**:
- Implement real WordPress $wpdb queries
- Use the custom table: `{$wpdb->prefix}rb_bookings`
- Handle error cases gracefully
- Support pagination and filtering
- Return properly structured data arrays

**Methods to Implement**:
```php
<?php
/**
 * Booking Model - Real Database Implementation
 * 
 * @package RestaurantBooking\Models
 */
class RB_Booking {
    
    private $table_name;
    
    public function __construct() {
        global $wpdb;
        $this->table_name = $wpdb->prefix . 'rb_bookings';
    }
    
    /**
     * Get bookings with filters
     * 
     * @param array $args {
     *     @type string $status Booking status (pending, confirmed, cancelled)
     *     @type int    $location_id Location ID filter
     *     @type string $date_from Start date (Y-m-d)
     *     @type string $date_to End date (Y-m-d)
     *     @type int    $per_page Results per page
     *     @type int    $page Current page number
     *     @type string $orderby Column to order by
     *     @type string $order ASC or DESC
     * }
     * @return array {
     *     @type array $bookings Array of booking objects
     *     @type int   $total Total count
     *     @type int   $pages Total pages
     * }
     */
    public function get_bookings($args = array()) {
        global $wpdb;
        
        // TODO: Implement this method with:
        // 1. Parse and sanitize $args
        // 2. Build WHERE clause based on filters
        // 3. Execute COUNT query for total
        // 4. Execute SELECT query with LIMIT/OFFSET
        // 5. Return structured array with bookings, total, pages
    }
    
    /**
     * Get single booking by ID
     * 
     * @param int $booking_id
     * @return object|false Booking object or false if not found
     */
    public function get_booking($booking_id) {
        global $wpdb;
        
        // TODO: Implement with $wpdb->get_row()
        // Include JOINs for customer, location, table data
    }
    
    /**
     * Get today's bookings for a location
     * 
     * @param int $location_id
     * @return array Array of booking objects
     */
    public function get_todays_bookings($location_id = null) {
        // TODO: Implement for dashboard "Today's Schedule"
        // Filter by current date
        // Order by booking_time ASC
    }
    
    /**
     * Get booking statistics for location
     * 
     * @param int $location_id
     * @param string $date Date (Y-m-d) - defaults to today
     * @return array {
     *     @type int $total_bookings
     *     @type int $confirmed
     *     @type int $pending
     *     @type int $cancelled
     *     @type int $total_guests
     *     @type float $revenue
     *     @type float $occupancy_rate Percentage
     * }
     */
    public function get_location_stats($location_id, $date = null) {
        // TODO: Implement complex statistics query
        // Calculate totals, counts, revenue
        // Calculate occupancy rate based on available tables
    }
    
    /**
     * Create new booking
     * 
     * @param array $data Booking data
     * @return int|WP_Error Booking ID or error
     */
    public function create_booking($data) {
        global $wpdb;
        
        // TODO: Implement with validation
        // 1. Validate required fields
        // 2. Check table availability
        // 3. Insert into database
        // 4. Return booking ID or WP_Error
    }
    
    /**
     * Update existing booking
     * 
     * @param int $booking_id
     * @param array $data Updated data
     * @return bool|WP_Error Success or error
     */
    public function update_booking($booking_id, $data) {
        // TODO: Implement update logic
        // Validate data, check permissions
        // Use $wpdb->update()
    }
    
    /**
     * Delete booking
     * 
     * @param int $booking_id
     * @return bool Success
     */
    public function delete_booking($booking_id) {
        // TODO: Implement soft delete (set status = 'deleted')
        // Or hard delete with $wpdb->delete()
    }
}
```

### 2. includes/models/class-location.php

**Requirements**:
- Query locations from `{$wpdb->prefix}rb_locations`
- Include related data (tables, operating hours)
- Support CRUD operations

**Key Methods to Implement**:
```php
<?php
class RB_Location {
    
    /**
     * Get all locations
     * 
     * @param array $args Optional filters
     * @return array Array of location objects
     */
    public function get_locations($args = array()) {
        // TODO: Query rb_locations table
        // Support filters: status, search
        // Order by name ASC
    }
    
    /**
     * Get location tables
     * 
     * @param int $location_id
     * @return array Array of table objects with availability
     */
    public function get_tables($location_id) {
        // TODO: Query rb_tables table
        // JOIN with current bookings to show availability
        // Calculate occupied/available status
    }
    
    /**
     * Get location statistics
     * 
     * @param int $location_id
     * @param string $period '7d', '30d', '90d'
     * @return array Statistics data
     */
    public function get_location_statistics($location_id, $period = '30d') {
        // TODO: Calculate:
        // - Total bookings in period
        // - Revenue
        // - Average party size
        // - Popular time slots
        // - Occupancy trends
    }
}
```

### 3. includes/services/class-analytics-service.php

**Requirements**:
- Aggregate data from bookings and locations
- Generate chart data for dashboard
- Calculate KPIs and metrics

**Key Methods**:
```php
<?php
class RB_Analytics_Service {
    
    private static $instance = null;
    
    public static function get_instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Get dashboard statistics
     * 
     * @param int $location_id
     * @param string $date Date (Y-m-d)
     * @return array {
     *     @type int $todays_bookings
     *     @type float $todays_revenue
     *     @type float $occupancy_rate
     *     @type int $available_tables
     *     @type int $pending_count
     *     @type array $comparison Previous period comparison
     * }
     */
    public function get_dashboard_stats($location_id, $date = null) {
        // TODO: Aggregate from RB_Booking model
        // Include day-over-day comparisons
        // Calculate percentage changes
    }
    
    /**
     * Get booking trends for charts
     * 
     * @param int $location_id
     * @param string $period '7d', '30d', '90d'
     * @return array {
     *     @type array $labels Date labels
     *     @type array $bookings Booking counts
     *     @type array $revenue Revenue amounts
     * }
     */
    public function get_booking_trends($location_id, $period = '7d') {
        // TODO: Generate time-series data
        // Format for Chart.js consumption
        // Group by day/week/month based on period
    }
    
    /**
     * Get popular time slots
     * 
     * @param int $location_id
     * @param string $period
     * @return array Array of time slots with booking counts
     */
    public function get_popular_times($location_id, $period = '30d') {
        // TODO: Analyze booking_time distribution
        // Group by hour ranges (lunch, dinner, etc.)
    }
}
```

## Database Schema Reference

The plugin uses these custom tables:
```sql
-- Bookings table
CREATE TABLE {$wpdb->prefix}rb_bookings (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    customer_name varchar(255) NOT NULL,
    customer_email varchar(255) NOT NULL,
    customer_phone varchar(50),
    booking_date date NOT NULL,
    booking_time time NOT NULL,
    party_size int NOT NULL,
    table_id bigint(20),
    location_id bigint(20) NOT NULL,
    status varchar(20) DEFAULT 'pending',
    special_requests text,
    created_at datetime DEFAULT CURRENT_TIMESTAMP,
    updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    KEY location_id (location_id),
    KEY booking_date (booking_date),
    KEY status (status)
);

-- Locations table
CREATE TABLE {$wpdb->prefix}rb_locations (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    name varchar(255) NOT NULL,
    address text,
    phone varchar(50),
    email varchar(255),
    capacity int,
    status varchar(20) DEFAULT 'active',
    created_at datetime DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);

-- Tables table
CREATE TABLE {$wpdb->prefix}rb_tables (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    location_id bigint(20) NOT NULL,
    table_number varchar(50) NOT NULL,
    capacity int NOT NULL,
    status varchar(20) DEFAULT 'available',
    position_x int,
    position_y int,
    created_at datetime DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    KEY location_id (location_id)
);
```

## Testing Requirements

After implementation, test these scenarios:

1. **Empty Database**: Should return empty arrays, not errors
2. **Sample Data**: Create 10 test bookings and verify queries work
3. **Filtering**: Test all filter combinations
4. **Pagination**: Verify LIMIT/OFFSET calculations
5. **Performance**: Queries should execute in < 100ms
6. **Error Handling**: Invalid IDs should return false/WP_Error

## Success Criteria

- [ ] All methods return real data from database
- [ ] No placeholder/hardcoded values
- [ ] Proper error handling implemented
- [ ] Queries are optimized with proper indexes
- [ ] Dashboard displays real statistics
- [ ] Calendar shows actual bookings
- [ ] No PHP warnings or notices

## Additional Notes

- Use WordPress coding standards
- Sanitize all inputs with $wpdb->prepare()
- Escape all outputs
- Add proper PHPDoc comments
- Include @since version tags
- Follow existing plugin architecture

🔴 PROMPT 2: TẠO RB_ANALYTICS CLASS MISSING
📋 Context
Portal dashboard bootstrap expects RB_Analytics class nhưng class này không được định nghĩa, gây ra fatal error.
🎯 Prompt
markdown# TASK: Create Missing RB_Analytics Class

## Context
The portal dashboard is throwing a fatal error because it expects an `RB_Analytics` class that doesn't exist in the codebase. We need to create this class to handle analytics operations.

## File to Create

**File Path**: `includes/services/class-rb-analytics.php`

## Class Structure
```php
<?php
/**
 * RB Analytics - Business Intelligence Service
 * 
 * Provides analytics, reporting, and data aggregation services
 * for the Modern Restaurant Booking system.
 * 
 * @package RestaurantBooking\Services
 * @since 2.0.0
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

class RB_Analytics {
    
    /**
     * Singleton instance
     * 
     * @var RB_Analytics
     */
    private static $instance = null;
    
    /**
     * Booking model instance
     * 
     * @var RB_Booking
     */
    private $booking_model;
    
    /**
     * Location model instance
     * 
     * @var RB_Location
     */
    private $location_model;
    
    /**
     * Private constructor for singleton
     */
    private function __construct() {
        $this->booking_model = new RB_Booking();
        $this->location_model = new RB_Location();
    }
    
    /**
     * Get singleton instance
     * 
     * @return RB_Analytics
     */
    public static function get_instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Get comprehensive dashboard analytics
     * 
     * This is the main method called by portal-dashboard.php
     * 
     * @param int $location_id Location to analyze
     * @param string $date Target date (Y-m-d), defaults to today
     * @return array {
     *     @type array $stats Current statistics
     *     @type array $trends Historical trends
     *     @type array $schedule Today's booking schedule
     *     @type array $alerts Important notifications
     * }
     */
    public function get_dashboard_analytics($location_id, $date = null) {
        if ($date === null) {
            $date = current_time('Y-m-d');
        }
        
        return array(
            'stats' => $this->get_current_stats($location_id, $date),
            'trends' => $this->get_booking_trends($location_id, '7d'),
            'schedule' => $this->get_todays_schedule($location_id, $date),
            'alerts' => $this->get_dashboard_alerts($location_id, $date)
        );
    }
    
    /**
     * Get current day statistics
     * 
     * @param int $location_id
     * @param string $date
     * @return array {
     *     @type int $todays_bookings Total bookings today
     *     @type float $todays_revenue Expected revenue
     *     @type float $occupancy_rate Percentage of tables occupied
     *     @type int $available_tables Currently available tables
     *     @type int $pending_confirmations Bookings awaiting confirmation
     *     @type array $comparison Comparison with previous day
     * }
     */
    public function get_current_stats($location_id, $date) {
        // TODO: Implement
        // 1. Get today's booking stats from RB_Booking model
        // 2. Calculate occupancy rate
        // 3. Get available tables from RB_Location model
        // 4. Compare with previous day for trends
        
        $stats = $this->booking_model->get_location_stats($location_id, $date);
        
        // Get yesterday's data for comparison
        $yesterday = date('Y-m-d', strtotime($date . ' -1 day'));
        $yesterday_stats = $this->booking_model->get_location_stats($location_id, $yesterday);
        
        // Calculate percentage changes
        $booking_change = $this->calculate_percentage_change(
            $yesterday_stats['total_bookings'],
            $stats['total_bookings']
        );
        
        $revenue_change = $this->calculate_percentage_change(
            $yesterday_stats['revenue'],
            $stats['revenue']
        );
        
        return array(
            'todays_bookings' => $stats['total_bookings'],
            'todays_revenue' => $stats['revenue'],
            'occupancy_rate' => $stats['occupancy_rate'],
            'available_tables' => $this->get_available_table_count($location_id, $date),
            'pending_confirmations' => $stats['pending'],
            'comparison' => array(
                'bookings_change' => $booking_change,
                'revenue_change' => $revenue_change,
                'trend' => $booking_change >= 0 ? 'up' : 'down'
            )
        );
    }
    
    /**
     * Get booking trends over time
     * 
     * @param int $location_id
     * @param string $period '7d', '30d', '90d'
     * @return array {
     *     @type array $labels Date labels for chart
     *     @type array $datasets Chart.js compatible datasets
     * }
     */
    public function get_booking_trends($location_id, $period = '7d') {
        // TODO: Implement time-series data for charts
        // Format: Chart.js compatible structure
        
        $days = $this->period_to_days($period);
        $data = array();
        
        for ($i = $days - 1; $i >= 0; $i--) {
            $date = date('Y-m-d', strtotime("-{$i} days"));
            $stats = $this->booking_model->get_location_stats($location_id, $date);
            
            $data[] = array(
                'date' => $date,
                'label' => date('M j', strtotime($date)),
                'bookings' => $stats['total_bookings'],
                'revenue' => $stats['revenue'],
                'guests' => $stats['total_guests']
            );
        }
        
        return array(
            'labels' => array_column($data, 'label'),
            'datasets' => array(
                array(
                    'label' => 'Bookings',
                    'data' => array_column($data, 'bookings'),
                    'borderColor' => 'rgb(59, 130, 246)',
                    'backgroundColor' => 'rgba(59, 130, 246, 0.1)'
                ),
                array(
                    'label' => 'Revenue',
                    'data' => array_column($data, 'revenue'),
                    'borderColor' => 'rgb(16, 185, 129)',
                    'backgroundColor' => 'rgba(16, 185, 129, 0.1)'
                )
            )
        );
    }
    
    /**
     * Get today's booking schedule
     * 
     * @param int $location_id
     * @param string $date
     * @return array Array of scheduled bookings
     */
    public function get_todays_schedule($location_id, $date) {
        // TODO: Get today's bookings ordered by time
        return $this->booking_model->get_todays_bookings($location_id);
    }
    
    /**
     * Get dashboard alerts and notifications
     * 
     * @param int $location_id
     * @param string $date
     * @return array Array of alert objects
     */
    public function get_dashboard_alerts($location_id, $date) {
        // TODO: Generate alerts for:
        // - Bookings needing confirmation
        // - Overbookings
        // - Special requests requiring attention
        // - Upcoming high-capacity bookings
        
        $alerts = array();
        
        // Check pending confirmations
        $stats = $this->booking_model->get_location_stats($location_id, $date);
        if ($stats['pending'] > 0) {
            $alerts[] = array(
                'type' => 'warning',
                'message' => sprintf(
                    _n(
                        '%d booking needs confirmation',
                        '%d bookings need confirmation',
                        $stats['pending'],
                        'restaurant-booking'
                    ),
                    $stats['pending']
                ),
                'action_url' => admin_url('admin.php?page=rb-bookings&status=pending')
            );
        }
        
        // Check occupancy
        if ($stats['occupancy_rate'] > 90) {
            $alerts[] = array(
                'type' => 'info',
                'message' => __('High occupancy expected today. Consider waitlist.', 'restaurant-booking'),
                'action_url' => null
            );
        }
        
        return $alerts;
    }
    
    /**
     * Get available table count at specific time
     * 
     * @param int $location_id
     * @param string $date
     * @param string $time Optional specific time
     * @return int Available table count
     */
    private function get_available_table_count($location_id, $date, $time = null) {
        // TODO: Calculate available tables
        // Consider current bookings and time slots
        
        $tables = $this->location_model->get_tables($location_id);
        $total_tables = count($tables);
        
        // For now, return simple calculation
        // In production, this should account for booking times
        $occupied = 0; // Calculate from bookings
        
        return max(0, $total_tables - $occupied);
    }
    
    /**
     * Calculate percentage change between two values
     * 
     * @param float $old_value
     * @param float $new_value
     * @return float Percentage change
     */
    private function calculate_percentage_change($old_value, $new_value) {
        if ($old_value == 0) {
            return $new_value > 0 ? 100 : 0;
        }
        
        return round((($new_value - $old_value) / $old_value) * 100, 1);
    }
    
    /**
     * Convert period string to number of days
     * 
     * @param string $period '7d', '30d', '90d'
     * @return int Number of days
     */
    private function period_to_days($period) {
        $map = array(
            '7d' => 7,
            '30d' => 30,
            '90d' => 90
        );
        
        return isset($map[$period]) ? $map[$period] : 7;
    }
    
    /**
     * Export analytics data
     * 
     * @param int $location_id
     * @param string $format 'csv', 'pdf', 'excel'
     * @param array $filters Date range and other filters
     * @return string File path or download URL
     */
    public function export_analytics($location_id, $format = 'csv', $filters = array()) {
        // TODO: Implement export functionality
        // Generate downloadable reports
        
        switch ($format) {
            case 'csv':
                return $this->export_csv($location_id, $filters);
            case 'pdf':
                return $this->export_pdf($location_id, $filters);
            case 'excel':
                return $this->export_excel($location_id, $filters);
            default:
                return new WP_Error('invalid_format', __('Invalid export format', 'restaurant-booking'));
        }
    }
}
```

## Integration Steps

### 1. Register the class in plugin loader

Update `includes/class-plugin-manager.php`:
```php
// Add to load_dependencies() method
require_once RESTAURANT_BOOKING_PATH . 'includes/services/class-rb-analytics.php';
```

### 2. Update portal dashboard to use RB_Analytics

In `public/partials/portal-dashboard.php`, ensure it uses:
```php
<?php
// Get analytics instance
$analytics = RB_Analytics::get_instance();

// Get dashboard data
$dashboard_data = $analytics->get_dashboard_analytics(
    $current_location_id,
    current_time('Y-m-d')
);

// Extract data for display
$stats = $dashboard_data['stats'];
$trends = $dashboard_data['trends'];
$schedule = $dashboard_data['schedule'];
$alerts = $dashboard_data['alerts'];
?>
```

### 3. Create AJAX endpoint

In `public/class-modern-dashboard.php`:
```php
public function ajax_get_analytics() {
    check_ajax_referer('rb_dashboard_nonce', 'nonce');
    
    $location_id = intval($_POST['location_id'] ?? 0);
    $date = sanitize_text_field($_POST['date'] ?? current_time('Y-m-d'));
    
    if (!current_user_can('manage_bookings')) {
        wp_send_json_error(array('message' => 'Permission denied'), 403);
    }
    
    $analytics = RB_Analytics::get_instance();
    $data = $analytics->get_dashboard_analytics($location_id, $date);
    
    wp_send_json_success($data);
}
```

## Testing Checklist

- [ ] Class can be instantiated without errors
- [ ] get_dashboard_analytics() returns properly structured data
- [ ] Dashboard loads without fatal errors
- [ ] Stats display real data (not placeholders)
- [ ] Charts render with trend data
- [ ] Alerts appear when conditions are met
- [ ] Singleton pattern works correctly

## Success Criteria

- [ ] No fatal errors when loading dashboard
- [ ] RB_Analytics class is properly autoloaded
- [ ] All public methods return expected data structures
- [ ] Dashboard displays real analytics
- [ ] No PHP warnings or notices

🔴 PROMPT 3: TẠO MISSING ADMIN ASSETS
📋 Context
Admin controller enqueues modern-admin.css và modern-admin.js nhưng files này không tồn tại, gây ra 404 errors.
🎯 Prompt
markdown# TASK: Create Missing WordPress Admin Assets

## Context
The WordPress admin interface is trying to load modern styling and functionality, but the asset files are missing from the repository, resulting in 404 errors.

## Files to Create

### 1. assets/css/modern-admin.css

**File Path**: `assets/css/modern-admin.css`

**Purpose**: Apply modern design system to WordPress admin pages
```css
/**
 * Modern Restaurant Booking - WordPress Admin Styles
 * 
 * Applies the modern design system to WordPress admin pages
 * while respecting WordPress admin conventions.
 * 
 * @package RestaurantBooking
 * @since 2.0.0
 */

/* ==================== IMPORT DESIGN SYSTEM ==================== */
/* Ensure design system variables are available */
@import url('design-system.css');

/* ==================== ADMIN WRAPPER ==================== */

.rb-admin-wrapper {
  max-width: 1400px;
  margin: 20px 0 0 0;
  background: var(--rb-bg-primary);
  border-radius: var(--rb-radius-lg);
  box-shadow: var(--rb-shadow-sm);
  overflow: hidden;
}

/* ==================== ADMIN HEADER ==================== */

.rb-admin-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--rb-spacing-6);
  background: var(--rb-bg-primary);
  border-bottom: 1px solid var(--rb-border);
}

.rb-admin-header h1 {
  margin: 0;
  font-size: var(--rb-text-2xl);
  font-weight: 700;
  color: var(--rb-text-primary);
}

.rb-admin-header-actions {
  display: flex;
  gap: var(--rb-spacing-3);
}

/* ==================== ADMIN TABS ==================== */

.rb-admin-tabs {
  display: flex;
  gap: 0;
  background: var(--rb-bg-secondary);
  border-bottom: 1px solid var(--rb-border);
  padding: 0 var(--rb-spacing-6);
}

.rb-admin-tab {
  padding: var(--rb-spacing-4) var(--rb-spacing-6);
  background: transparent;
  border: none;
  color: var(--rb-text-secondary);
  font-size: var(--rb-text-base);
  font-weight: 500;
  cursor: pointer;
  transition: all var(--rb-transition-fast);
  position: relative;
  border-bottom: 2px solid transparent;
}

.rb-admin-tab:hover {
  color: var(--rb-text-primary);
  background: var(--rb-bg-hover);
}

.rb-admin-tab.active {
  color: var(--rb-primary-600);
  border-bottom-color: var(--rb-primary-600);
}

/* ==================== ADMIN CONTENT ==================== */

.rb-admin-content {
  padding: var(--rb-spacing-6);
}

.rb-admin-section {
  margin-bottom: var(--rb-spacing-8);
}

.rb-admin-section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: var(--rb-spacing-4);
}

.rb-admin-section-title {
  font-size: var(--rb-text-xl);
  font-weight: 600;
  color: var(--rb-text-primary);
  margin: 0;
}

.rb-admin-section-description {
  color: var(--rb-text-secondary);
  font-size: var(--rb-text-sm);
  margin-top: var(--rb-spacing-2);
}

/* ==================== STATS GRID ==================== */

.rb-admin-stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: var(--rb-spacing-4);
  margin-bottom: var(--rb-spacing-6);
}

.rb-admin-stat-card {
  background: var(--rb-bg-primary);
  border: 1px solid var(--rb-border);
  border-radius: var(--rb-radius-lg);
  padding: var(--rb-spacing-5);
  transition: all var(--rb-transition-base);
}

.rb-admin-stat-card:hover {
  box-shadow: var(--rb-shadow-md);
  transform: translateY(-2px);
}

.rb-admin-stat-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: var(--rb-spacing-3);
}

.rb-admin-stat-title {
  font-size: var(--rb-text-sm);
  color: var(--rb-text-secondary);
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.rb-admin-stat-icon {
  width: 20px;
  height: 20px;
  color: var(--rb-primary-500);
}

.rb-admin-stat-number {
  font-size: var(--rb-text-3xl);
  font-weight: 700;
  color: var(--rb-text-primary);
  margin-bottom: var(--rb-spacing-2);
}

.rb-admin-stat-change {
  font-size: var(--rb-text-sm);
  font-weight: 500;
}

.rb-admin-stat-change.positive {
  color: var(--rb-success);
}

.rb-admin-stat-change.negative {
  color: var(--rb-error);
}

/* ==================RetryVContinue==================== */
/* ==================== LOCATION CARDS ==================== */
.rb-location-cards {
display: grid;
grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
gap: var(--rb-spacing-4);
margin-bottom: var(--rb-spacing-6);
}
.rb-location-card {
background: var(--rb-bg-primary);
border: 1px solid var(--rb-border);
border-radius: var(--rb-radius-lg);
padding: var(--rb-spacing-5);
transition: all var(--rb-transition-base);
cursor: pointer;
}
.rb-location-card:hover {
box-shadow: var(--rb-shadow-lg);
transform: translateY(-4px);
border-color: var(--rb-primary-300);
}
.rb-location-card-header {
display: flex;
align-items: center;
justify-content: space-between;
margin-bottom: var(--rb-spacing-4);
}
.rb-location-card-title {
font-size: var(--rb-text-lg);
font-weight: 600;
color: var(--rb-text-primary);
margin: 0;
}
.rb-location-card-badge {
padding: var(--rb-spacing-1) var(--rb-spacing-3);
background: var(--rb-success-light);
color: var(--rb-success);
border-radius: var(--rb-radius-full);
font-size: var(--rb-text-xs);
font-weight: 600;
}
.rb-location-card-stats {
display: flex;
gap: var(--rb-spacing-4);
margin-top: var(--rb-spacing-4);
}
.rb-location-stat {
flex: 1;
}
.rb-location-stat-label {
font-size: var(--rb-text-xs);
color: var(--rb-text-secondary);
margin-bottom: var(--rb-spacing-1);
}
.rb-location-stat-value {
font-size: var(--rb-text-xl);
font-weight: 700;
color: var(--rb-text-primary);
}
/* ==================== SETTINGS PANEL ==================== */
.rb-settings-wrapper {
display: flex;
gap: var(--rb-spacing-6);
background: var(--rb-bg-primary);
border-radius: var(--rb-radius-lg);
overflow: hidden;
}
.rb-settings-sidebar {
width: 250px;
background: var(--rb-bg-secondary);
border-right: 1px solid var(--rb-border);
padding: var(--rb-spacing-6);
}
.rb-settings-nav {
display: flex;
flex-direction: column;
gap: var(--rb-spacing-2);
}
.rb-settings-nav-link {
display: flex;
align-items: center;
gap: var(--rb-spacing-3);
padding: var(--rb-spacing-3) var(--rb-spacing-4);
color: var(--rb-text-secondary);
text-decoration: none;
border-radius: var(--rb-radius-md);
transition: all var(--rb-transition-fast);
font-weight: 500;
}
.rb-settings-nav-link:hover {
background: var(--rb-bg-hover);
color: var(--rb-text-primary);
}
.rb-settings-nav-link.active {
background: var(--rb-primary-50);
color: var(--rb-primary-600);
}
.rb-settings-content {
flex: 1;
padding: var(--rb-spacing-6);
}
.rb-settings-group {
margin-bottom: var(--rb-spacing-8);
}
.rb-settings-group-title {
font-size: var(--rb-text-lg);
font-weight: 600;
color: var(--rb-text-primary);
margin-bottom: var(--rb-spacing-4);
padding-bottom: var(--rb-spacing-3);
border-bottom: 2px solid var(--rb-border);
}
.rb-setting-row {
display: flex;
align-items: flex-start;
justify-content: space-between;
padding: var(--rb-spacing-4) 0;
border-bottom: 1px solid var(--rb-border);
}
.rb-setting-row:last-child {
border-bottom: none;
}
.rb-setting-label {
flex: 1;
max-width: 400px;
}
.rb-setting-label h4 {
font-size: var(--rb-text-base);
font-weight: 600;
color: var(--rb-text-primary);
margin: 0 0 var(--rb-spacing-2) 0;
}
.rb-setting-label p {
font-size: var(--rb-text-sm);
color: var(--rb-text-secondary);
margin: 0;
line-height: 1.5;
}
.rb-setting-control {
flex-shrink: 0;
min-width: 200px;
}
/* ==================== DATA TABLES ==================== */
.rb-admin-table {
width: 100%;
border-collapse: separate;
border-spacing: 0;
background: var(--rb-bg-primary);
border: 1px solid var(--rb-border);
border-radius: var(--rb-radius-lg);
overflow: hidden;
}
.rb-admin-table thead {
background: var(--rb-bg-secondary);
}
.rb-admin-table th {
padding: var(--rb-spacing-4) var(--rb-spacing-4);
text-align: left;
font-weight: 600;
font-size: var(--rb-text-sm);
color: var(--rb-text-secondary);
text-transform: uppercase;
letter-spacing: 0.05em;
border-bottom: 1px solid var(--rb-border);
}
.rb-admin-table td {
padding: var(--rb-spacing-4) var(--rb-spacing-4);
border-bottom: 1px solid var(--rb-border);
color: var(--rb-text-primary);
}
.rb-admin-table tbody tr {
transition: background-color var(--rb-transition-fast);
}
.rb-admin-table tbody tr:hover {
background: var(--rb-bg-hover);
}
.rb-admin-table tbody tr:last-child td {
border-bottom: none;
}
/* ==================== FORM ELEMENTS ==================== */
.rb-admin-form-group {
margin-bottom: var(--rb-spacing-5);
}
.rb-admin-form-label {
display: block;
font-weight: 600;
color: var(--rb-text-primary);
margin-bottom: var(--rb-spacing-2);
font-size: var(--rb-text-sm);
}
.rb-admin-form-input,
.rb-admin-form-select,
.rb-admin-form-textarea {
width: 100%;
padding: var(--rb-spacing-3) var(--rb-spacing-4);
border: 1px solid var(--rb-border);
border-radius: var(--rb-radius-md);
font-size: var(--rb-text-base);
color: var(--rb-text-primary);
background: var(--rb-bg-primary);
transition: all var(--rb-transition-fast);
}
.rb-admin-form-input:focus,
.rb-admin-form-select:focus,
.rb-admin-form-textarea:focus {
outline: none;
border-color: var(--rb-primary-500);
box-shadow: 0 0 0 3px var(--rb-primary-100);
}
.rb-admin-form-help {
font-size: var(--rb-text-sm);
color: var(--rb-text-secondary);
margin-top: var(--rb-spacing-2);
}
/* ==================== RESPONSIVE ==================== */
@media (max-width: 1024px) {
.rb-admin-stats-grid {
grid-template-columns: repeat(2, 1fr);
}
.rb-location-cards {
grid-template-columns: repeat(2, 1fr);
}
}
@media (max-width: 768px) {
.rb-admin-header {
flex-direction: column;
align-items: flex-start;
gap: var(--rb-spacing-4);
}
.rb-admin-tabs {
overflow-x: auto;
padding: 0 var(--rb-spacing-4);
}
.rb-admin-stats-grid {
grid-template-columns: 1fr;
}
.rb-location-cards {
grid-template-columns: 1fr;
}
.rb-settings-wrapper {
flex-direction: column;
}
.rb-settings-sidebar {
width: 100%;
border-right: none;
border-bottom: 1px solid var(--rb-border);
}
.rb-settings-nav {
flex-direction: row;
overflow-x: auto;
}
.rb-setting-row {
flex-direction: column;
gap: var(--rb-spacing-3);
}
.rb-setting-control {
width: 100%;
}
}
/* ==================== WORDPRESS ADMIN OVERRIDES ==================== */
/* Ensure proper spacing in WordPress admin context */
.wrap .rb-admin-wrapper {
margin-top: 0;
}
/* Fix WordPress admin menu conflicts */
#adminmenu .rb-admin-menu-icon {
width: 20px;
height: 20px;
}
/* WordPress notice compatibility */
.rb-admin-wrapper + .notice,
.rb-admin-wrapper + .error,
.rb-admin-wrapper + .updated {
margin-top: 20px;
}
/* ==================== DARK MODE SUPPORT ==================== */
[data-theme="dark"] .rb-admin-wrapper {
box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
}
[data-theme="dark"] .rb-admin-table tbody tr:hover {
background: rgba(255, 255, 255, 0.05);
}
[data-theme="dark"] .rb-location-card:hover {
box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
}

---

### 2. assets/js/modern-admin.js

**File Path**: `assets/js/modern-admin.js`

**Purpose**: Add interactive functionality to WordPress admin
```javascript
/**
 * Modern Restaurant Booking - WordPress Admin JavaScript
 * 
 * Handles interactive features in the WordPress admin interface:
 * - Tab navigation
 * - Settings management
 * - Multi-location dashboard
 * - Analytics visualization
 * - Real-time updates
 * 
 * @package RestaurantBooking
 * @since 2.0.0
 */

(function($) {
  'use strict';

  /**
   * Admin Dashboard Controller
   */
  class ModernAdmin {
    constructor() {
      this.currentTab = 'dashboard';
      this.currentLocation = null;
      this.refreshInterval = null;
      
      this.init();
    }
    
    init() {
      console.log('Modern Restaurant Booking Admin - Initializing...');
      
      this.setupTabs();
      this.setupLocationCards();
      this.setupSettings();
      this.setupCharts();
      this.setupAutoRefresh();
      this.setupThemeToggle();
      
      // Load initial data
      this.loadDashboardData();
      
      console.log('Modern Restaurant Booking Admin - Ready!');
    }
    
    /**
     * Setup tab navigation
     */
    setupTabs() {
      $('.rb-admin-tab').on('click', (e) => {
        e.preventDefault();
        const $tab = $(e.currentTarget);
        const tabId = $tab.data('tab');
        
        this.switchTab(tabId);
      });
      
      // Handle URL hash for direct tab access
      if (window.location.hash) {
        const tabId = window.location.hash.replace('#', '');
        this.switchTab(tabId);
      }
    }
    
    /**
     * Switch active tab
     */
    switchTab(tabId) {
      // Update active tab button
      $('.rb-admin-tab').removeClass('active');
      $(`.rb-admin-tab[data-tab="${tabId}"]`).addClass('active');
      
      // Show/hide content
      $('.rb-admin-tab-content').removeClass('active').hide();
      $(`#${tabId}-content`).addClass('active').fadeIn(200);
      
      // Update URL hash
      window.location.hash = tabId;
      this.currentTab = tabId;
      
      // Load tab-specific data
      this.loadTabData(tabId);
    }
    
    /**
     * Setup location cards
     */
    setupLocationCards() {
      $('.rb-location-card').on('click', (e) => {
        const $card = $(e.currentTarget);
        const locationId = $card.data('location-id');
        
        this.selectLocation(locationId);
      });
    }
    
    /**
     * Select a location and load its data
     */
    selectLocation(locationId) {
      this.currentLocation = locationId;
      
      // Update active state
      $('.rb-location-card').removeClass('active');
      $(`.rb-location-card[data-location-id="${locationId}"]`).addClass('active');
      
      // Load location-specific data
      this.loadLocationData(locationId);
    }
    
    /**
     * Load dashboard data
     */
    loadDashboardData() {
      if (!window.rbAdminData) {
        console.error('Admin data not available');
        return;
      }
      
      $.ajax({
        url: window.rbAdminData.ajaxUrl,
        type: 'POST',
        data: {
          action: 'rb_get_admin_dashboard',
          nonce: window.rbAdminData.nonce
        },
        beforeSend: () => {
          this.showLoading();
        },
        success: (response) => {
          if (response.success) {
            this.renderDashboard(response.data);
          } else {
            this.showError(response.data.message || 'Failed to load dashboard data');
          }
        },
        error: (xhr, status, error) => {
          console.error('Dashboard AJAX error:', error);
          this.showError('Network error. Please try again.');
        },
        complete: () => {
          this.hideLoading();
        }
      });
    }
    
    /**
     * Render dashboard data
     */
    renderDashboard(data) {
      // Update location cards
      if (data.locations) {
        this.renderLocationCards(data.locations);
      }
      
      // Update global stats
      if (data.global_stats) {
        this.updateGlobalStats(data.global_stats);
      }
      
      // Update system health
      if (data.system_health) {
        this.updateSystemHealth(data.system_health);
      }
    }
    
    /**
     * Render location cards
     */
    renderLocationCards(locations) {
      const $container = $('.rb-location-cards');
      
      if (!locations || locations.length === 0) {
        $container.html('<p class="rb-empty-state">No locations found</p>');
        return;
      }
      
      $container.empty();
      
      locations.forEach(location => {
        const card = this.createLocationCard(location);
        $container.append(card);
      });
      
      // Re-attach click handlers
      this.setupLocationCards();
    }
    
    /**
     * Create location card HTML
     */
    createLocationCard(location) {
      const statusClass = location.status === 'active' ? 'success' : 'warning';
      const changeClass = location.stats.trend >= 0 ? 'positive' : 'negative';
      const changeIcon = location.stats.trend >= 0 ? '↑' : '↓';
      
      return `
        <div class="rb-location-card" data-location-id="${location.id}">
          <div class="rb-location-card-header">
            <h3 class="rb-location-card-title">${location.name}</h3>
            <span class="rb-location-card-badge rb-badge-${statusClass}">
              ${location.status}
            </span>
          </div>
          <div class="rb-location-card-address">
            <svg class="rb-icon" width="16" height="16" fill="currentColor">
              <use href="#icon-location"></use>
            </svg>
            <span>${location.address}</span>
          </div>
          <div class="rb-location-card-stats">
            <div class="rb-location-stat">
              <div class="rb-location-stat-label">Today's Bookings</div>
              <div class="rb-location-stat-value">${location.stats.bookings}</div>
            </div>
            <div class="rb-location-stat">
              <div class="rb-location-stat-label">Revenue</div>
              <div class="rb-location-stat-value">$${location.stats.revenue}</div>
            </div>
          </div>
          <div class="rb-location-card-footer">
            <span class="rb-stat-change ${changeClass}">
              ${changeIcon} ${Math.abs(location.stats.trend)}% from yesterday
            </span>
          </div>
        </div>
      `;
    }
    
    /**
     * Update global statistics
     */
    updateGlobalStats(stats) {
      $('#total-bookings').text(stats.total_bookings || 0);
      $('#total-revenue').text(`$${stats.total_revenue || 0}`);
      $('#active-locations').text(stats.active_locations || 0);
      $('#pending-bookings').text(stats.pending_bookings || 0);
    }
    
    /**
     * Setup settings management
     */
    setupSettings() {
      // Settings navigation
      $('.rb-settings-nav-link').on('click', (e) => {
        e.preventDefault();
        const $link = $(e.currentTarget);
        const settingsTab = $link.attr('href').replace('#', '');
        
        this.switchSettingsTab(settingsTab);
      });
      
      // Settings form submission
      $('.rb-settings-form').on('submit', (e) => {
        e.preventDefault();
        this.saveSettings(e.target);
      });
      
      // Toggle switches
      $('.rb-toggle-switch input').on('change', (e) => {
        const $input = $(e.currentTarget);
        const settingKey = $input.attr('name');
        const value = $input.is(':checked');
        
        this.updateSetting(settingKey, value);
      });
    }
    
    /**
     * Switch settings tab
     */
    switchSettingsTab(tabId) {
      $('.rb-settings-nav-link').removeClass('active');
      $(`.rb-settings-nav-link[href="#${tabId}"]`).addClass('active');
      
      $('.rb-settings-panel').removeClass('active').hide();
      $(`#${tabId}`).addClass('active').fadeIn(200);
    }
    
    /**
     * Save settings
     */
    saveSettings(form) {
      const $form = $(form);
      const formData = $form.serialize();
      
      $.ajax({
        url: window.rbAdminData.ajaxUrl,
        type: 'POST',
        data: formData + '&action=rb_save_settings&nonce=' + window.rbAdminData.nonce,
        beforeSend: () => {
          $form.find('.rb-btn').prop('disabled', true).addClass('loading');
        },
        success: (response) => {
          if (response.success) {
            this.showNotice('Settings saved successfully', 'success');
          } else {
            this.showNotice(response.data.message || 'Failed to save settings', 'error');
          }
        },
        error: () => {
          this.showNotice('Network error. Please try again.', 'error');
        },
        complete: () => {
          $form.find('.rb-btn').prop('disabled', false).removeClass('loading');
        }
      });
    }
    
    /**
     * Setup charts
     */
    setupCharts() {
      if (typeof Chart === 'undefined') {
        console.warn('Chart.js not loaded');
        return;
      }
      
      this.initBookingTrendsChart();
      this.initRevenueChart();
    }
    
    /**
     * Initialize booking trends chart
     */
    initBookingTrendsChart() {
      const ctx = document.getElementById('bookingTrendsChart');
      if (!ctx) return;
      
      this.bookingTrendsChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Bookings',
            data: [],
            borderColor: 'rgb(59, 130, 246)',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }
    
    /**
     * Initialize revenue chart
     */
    initRevenueChart() {
      const ctx = document.getElementById('revenueChart');
      if (!ctx) return;
      
      this.revenueChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: [],
          datasets: [{
            label: 'Revenue',
            data: [],
            backgroundColor: 'rgba(16, 185, 129, 0.8)',
            borderColor: 'rgb(16, 185, 129)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return '$' + value;
                }
              }
            }
          }
        }
      });
    }
    
    /**
     * Setup auto-refresh
     */
    setupAutoRefresh() {
      // Auto-refresh every 5 minutes
      this.refreshInterval = setInterval(() => {
        if (this.currentTab === 'dashboard') {
          this.loadDashboardData();
        }
      }, 5 * 60 * 1000);
    }
    
    /**
     * Setup theme toggle integration
     */
    setupThemeToggle() {
      // Listen for theme changes from theme manager
      if (window.rbThemeManager) {
        window.rbThemeManager.onThemeChange((theme) => {
          console.log('Theme changed to:', theme);
          // Re-render charts with new theme colors if needed
          this.updateChartTheme(theme);
        });
      }
    }
    
    /**
     * Update chart colors for theme
     */
    updateChartTheme(theme) {
      // Update chart colors based on theme
      // This ensures charts look good in both light and dark mode
    }
    
    /**
     * Show loading indicator
     */
    showLoading() {
      $('.rb-admin-content').addClass('loading');
    }
    
    /**
     * Hide loading indicator
     */
    hideLoading() {
      $('.rb-admin-content').removeClass('loading');
    }
    
    /**
     * Show notice message
     */
    showNotice(message, type = 'info') {
      const noticeClass = type === 'error' ? 'notice-error' : 
                         type === 'success' ? 'notice-success' : 
                         'notice-info';
      
      const $notice = $(`
        <div class="notice ${noticeClass} is-dismissible">
          <p>${message}</p>
        </div>
      `);
      
      $('.rb-admin-wrapper').before($notice);
      
      // Auto-dismiss after 5 seconds
      setTimeout(() => {
        $notice.fadeOut(() => $notice.remove());
      }, 5000);
    }
    
    /**
     * Show error message
     */
    showError(message) {
      this.showNotice(message, 'error');
    }
    
    /**
     * Load tab-specific data
     */
    loadTabData(tabId) {
      // Implement tab-specific data loading
      console.log('Loading data for tab:', tabId);
    }
    
    /**
     * Load location-specific data
     */
    loadLocationData(locationId) {
      // Implement location-specific data loading
      console.log('Loading data for location:', locationId);
    }
    
    /**
     * Update system health indicators
     */
    updateSystemHealth(health) {
      // Update system health status
      console.log('System health:', health);
    }
    
    /**
     * Update single setting via AJAX
     */
    updateSetting(key, value) {
      $.ajax({
        url: window.rbAdminData.ajaxUrl,
        type: 'POST',
        data: {
          action: 'rb_update_setting',
          nonce: window.rbAdminData.nonce,
          key: key,
          value: value
        },
        success: (response) => {
          if (response.success) {
            this.showNotice('Setting updated', 'success');
          }
        }
      });
    }
  }

  /**
   * Initialize when DOM is ready
   */
  $(document).ready(function() {
    // Only initialize on restaurant booking admin pages
    if ($('.rb-admin-wrapper').length > 0) {
      window.rbModernAdmin = new ModernAdmin();
    }
  });

})(jQuery);
```

---

## Integration & Testing

### Update admin/class-modern-admin.php

Ensure assets are properly enqueued:
```php
public function enqueue_admin_assets($hook) {
    // Only load on our plugin pages
    if (strpos($hook, 'restaurant-booking') === false) {
        return;
    }
    
    // Design system (required)
    wp_enqueue_style('rb-design-system',
        RESTAURANT_BOOKING_URL . 'assets/css/design-system.css',
        array(),
        RESTAURANT_BOOKING_VERSION
    );
    
    // Admin styles
    wp_enqueue_style('rb-modern-admin',
        RESTAURANT_BOOKING_URL . 'assets/css/modern-admin.css',
        array('rb-design-system'),
        RESTAURANT_BOOKING_VERSION
    );
    
    // Theme manager
    wp_enqueue_script('rb-theme-manager',
        RESTAURANT_BOOKING_URL . 'assets/js/theme-manager.js',
        array(),
        RESTAURANT_BOOKING_VERSION,
        true
    );
    
    // Chart.js for analytics
    wp_enqueue_script('chart-js',
        'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js',
        array(),
        '3.9.1',
        true
    );
    
    // Admin JavaScript
    wp_enqueue_script('rb-modern-admin',
        RESTAURANT_BOOKING_URL . 'assets/js/modern-admin.js',
        array('jquery', 'rb-theme-manager', 'chart-js'),
        RESTAURANT_BOOKING_VERSION,
        true
    );
    
    // Localize script with data
    wp_localize_script('rb-modern-admin', 'rbAdminData', array(
        'ajaxUrl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('rb_admin_nonce'),
        'currentUser' => get_current_user_id(),
        'strings' => array(
            'confirmDelete' => __('Are you sure you want to delete this?', 'restaurant-booking'),
            'saved' => __('Saved successfully', 'restaurant-booking'),
            'error' => __('An error occurred', 'restaurant-booking')
        )
    ));
}
```

## Testing Checklist

- [ ] CSS file loads without 404 errors
- [ ] JS file loads without 404 errors
- [ ] Design system tokens are applied correctly
- [ ] Admin pages have modern styling
- [ ] Tabs switch properly
- [ ] Location cards render correctly
- [ ] Settings forms work
- [ ] Charts render (if Chart.js available)
- [ ] Theme toggle integrates properly
- [ ] Responsive design works on mobile
- [ ] No JavaScript console errors
- [ ] Compatible with WordPress 5.0+

## Success Criteria

- [ ] All 404 errors for admin assets resolved
- [ ] Modern design applied to WordPress admin
- [ ] Interactive features functional
- [ ] Charts display data correctly
- [ ] Settings can be saved
- [ ] No conflicts with other plugins
- [ ] Performance is acceptable (<100ms load time)
